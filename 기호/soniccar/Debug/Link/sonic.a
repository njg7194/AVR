;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#asm
;PCODE: $0000000D VOL: 0
.equ __lcd_port=0x1B     // PORTC의 경우
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0007 #endasm
;#include <lcd.h>        // LCD 제어함수를 사용하기 위한 헤더파일
;#define USTrgger        PORTC.0             // 트리거 펄스 출력 핀
;#define USEcho          PINC.1                // 에코 신호 입력 핀
;#define SOUND_SPEED_mm  (340000.f)  // 340m/s
;#define OVF_PERIOD_s    (0.000016f)     // = 1*256/16MHz = 16us
;/*
;int MeasureDistanceByUSS();
;long ovf_count;
;long rise_time, fall_time;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) // interr_countr 0 overflow interrupt
;{
;    ovf_count++;    // 매 16μs 마다 인터럽트 발생
;}
;void main(void)
;{
;    char sbuf[16];
;    int distance;
;    PORTA = 0xff;  DDRA = 0xff;      // LCD
;    PORTC = 0x02;  DDRC = 0x01;    // PC0: 트리거 출력, PC1: 에코 입력
;    PORTD = 0xff;  DDRD = 0xff;
;    TCCR0 = 0x01;             // normal mode, prescaler: 1
;    lcd_init(16);
;    #asm("sei")
;
;    while (1)
;    {
;        distance = MeasureDistanceByUSS();    // 초음파 발생 거리 구함
;        lcd_clear();
;        delay_ms(1);
;        lcd_gotoxy(0,0);
;        sprintf(sbuf, "Dist:%d mm", distance);  // 거리 값 디스플레이
;        lcd_puts(sbuf);
;        delay_ms(50);
;
;        if(distance<100 && distance >=40)
;        {
;         //Beep Beep
;         PORTD.0=0x01;
;         delay_ms(distance*5);
;         PORTD.0=0x00;
;        }
;        else
;        {
;         PORTD.0=0x01;
;        }
;    }
;}
;int MeasureDistanceByUSS(void)    // 초음파센서 작동하여 거리 구하기
;{
;    static float old_distance = 0.f;
;    float distance;
;    ovf_count = 0;
;    TIMSK = 0x01;     // timer0 overflow interrupt start
;    USTrgger = 1;     // 트리거 펄스(10μs) 발생
;    delay_us(10);
;    USTrgger = 0;
;
;    while( (USEcho == 0) && (ovf_count <= 2200) ); // 약 12미터가 넘어가면, 루프 탈출
;    rise_time = ovf_count;
;    while( (USEcho == 1) && (ovf_count <= 2200) );
;    fall_time = ovf_count;
;
;    TIMSK=0x00;        // timer interrupt stop
;    distance = SOUND_SPEED_mm*OVF_PERIOD_s*(fall_time-rise_time)/2.f;
;    if(distance < 40)
;        distance = old_distance;     // 거리 값이 50mm이하이면 이전데이터 리턴
;    else
;        old_distance = distance;     // 지금의 데이터를 예전 데이터변수로 전달
;    return (int)distance;
;}
;*/
;/*
;//DC PWM
;
;          //  "0",    "1",   "2",   "3",    "4",   "5",    "6",   "7",    "8",   "9"
;
;unsigned char FND[10]={0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
;
;
;
;void MPUinit(void)  // ============ 초기화 함수 =============
;
;{
;
;    PORTG=0x00;  DDRG=0xFF;    // Port A 모터
;
;    PORTD=0xFF;  DDRD=0xFF;     // Port B FND
;
;    PORTC=0xFF;  DDRC=0x00;    // Port C 스위치 입력
;
;    PORTB=0xFF;  DDRB=0xFF;
;
;
;
;    TCCR0 = 0x6c;   // 01101100  고속PWM, 256분주
;    TCNT0 = 0x00;
;
;    TCCR2 = 0x6c;   // 01101100  고속PWM, 256분주
;    TCNT2 = 0x00;
;}
;
;void main(void)     //============= 메인 함수 ============
;
;{
;
;    unsigned char buff0;    // 스위치 입력값 저장
;
;    MPUinit();
;
;    OCR0 = 0;             // 모터 정지 : duty ratio = 0%
;    OCR2 = 0;             // 모터 정지 : duty ratio = 0%
;    PORTG  = 0xF5;        // 정회전 모드 : 1(1)11 0101
;
;
;
;    while (1)
;
;    {
;
;        buff0 = PINC & 0x1F;    // 스위치 값 읽음
;
;        delay_ms(5);
;
;        switch(buff0)
;
;        {
;
;        case 0x1E:            // SW0이 눌리면(0001 1110)
;
;            OCR0 = 76;    // duty 비 =  30%
;            OCR2 = 76;    // duty 비 =  30%
;            PORTD = ~FND[1]; // FND “1“
;
;            break;
;
;        case 0x1D:            // SW1이 눌리면(0001 1101)
;
;           OCR0 = 152;   // duty 비 = 60%
;           OCR2 = 152;   // duty 비 = 60%
;            PORTD = ~FND[2]; // FND “2“
;
;            break;
;
;        case 0x1B:            // SW2이 눌리면(0001 1011)
;
;            OCR0 = 255;  // duty 비 = 100%
;            OCR2 = 255;   // duty 비 = 100%
;            PORTD = ~FND[3]; // FND “3“
;
;            break;
;
;        case 0x17:            // SW3이 눌리면 (0001 0111)
;
;            OCR0 = 0;   // duty 비 = 0%
;            OCR2 = 0;   // duty 비 = 60%
;            PORTD = ~FND[4]; // FND “4“
;
;            break;
;        }
;
;    };
;
;}
;*/
;//new 19.05.29
; //  "0",    "1",   "2",   "3",    "4",   "5",    "6",   "7",    "8",   "9"
;#define Q0        PORTB.0	//PortB.0 bit : FND Q0
;#define Q1        PORTB.1 	//PortB.1 bit : FND Q1
;#define Q2        PORTB.2 	//PortB.2 bit : FND Q2
;#define Q3        PORTB.3 	//PortB.3 bit : FND Q3
;
;unsigned char fnd[10]={0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

	.DSEG
;
;int MeasureDistanceByUSS();
;long ovf_count;
;long rise_time, fall_time;
;//int i;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) // interr_countr 0 overflow interrupt
; 0000 00BC {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 00BD     ovf_count++;    // 매 16μs 마다 인터럽트 발생
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 00BE }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;void MPUinit(void)  // ============ 초기화 함수 =============
; 0000 00C1 
; 0000 00C2 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 00C3     PORTA = 0xff;  DDRA = 0xff;      // LCD
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 00C4     PORTB=0xF0;  DDRB=0xFF; //PWM
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 00C5     PORTC = 0x02;  DDRC = 0x01;    // PC0: 트리거 출력, PC1: 에코 입력
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 00C6     PORTD = 0xff;  DDRD = 0xff;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 00C7     PORTE = 0xff;  DDRE = 0xff;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 00C8     PORTG=0x00;  DDRG=0xFF;    // Port A 모터
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 00C9 
; 0000 00CA     //TCCR0 = 0x6c;   // 01101100  고속PWM, 256분주
; 0000 00CB     //TCNT0 = 0x00;
; 0000 00CC 
; 0000 00CD     //TCCR2 = 0x6c;   // 01101100  고속PWM, 256분주
; 0000 00CE     //TCNT2 = 0x00;
; 0000 00CF }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;void FFND(int j)
; 0000 00D1 {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 00D2  int i=j;
; 0000 00D3         PORTE = ~fnd[i/1000];		// i 값 천 단위 계산 FND3 만 점등
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;	j -> Y+2
;	i -> R16,R17
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 00D4 		Q0=1,Q1=1,Q2=1,Q3=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 00D5 		delay_ms(1);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 00D6 
; 0000 00D7 		PORTE = ~fnd[i%1000/100]; 	// i 값 백 단위 계산 FND2 만 점등
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00D8 		Q0=1,Q1=1,Q2=0,Q3=1;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00D9 		delay_ms(1);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00DA 
; 0000 00DB 		PORTE = ~fnd[i%100/10]; 	// i 값 십 단위 계산 FND1 만 점등
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00DC 		Q0=1,Q1=0,Q2=1,Q3=1;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00DD 		delay_ms(1);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00DE 
; 0000 00DF 		PORTE = ~fnd[i%10/1]; 	// i 값 일 단위 계산 FND0 만 점등
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00E0 		Q0=0,Q1=1,Q2=1,Q3=1;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00E1 		delay_ms(1);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00E2 }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;void main(void)
; 0000 00E4 {
;PCODE: $00000092 VOL: 0
; 0000 00E5     char sbuf[16];
; 0000 00E6     int distance;
; 0000 00E7 
; 0000 00E8     MPUinit();
;PCODE: $00000093 VOL: 0
;	sbuf -> Y+0
;	distance -> R16,R17
;PCODE: $00000094 VOL: 0
; 0000 00E9 
; 0000 00EA     TCCR0 = 0x01;             // normal mode, prescaler: 1
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00EB 
; 0000 00EC     TCCR2 = 0x6c;   // 01101100  고속PWM, 256분주
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00ED     TCNT2 = 0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00EE     OCR2 = 187;             // 모터 정지 : duty ratio = 0%
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00EF 
; 0000 00F0     lcd_init(16);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00F1     #asm("sei")
;PCODE: $0000009F VOL: 0
; 0000 00F2 
; 0000 00F3     while (1)
;PCODE: $000000A0 VOL: 0
; 0000 00F4     {
; 0000 00F5         distance = MeasureDistanceByUSS();    // 초음파 발생 거리 구함
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00F6 
; 0000 00F7         lcd_clear();
;PCODE: $000000A3 VOL: 0
; 0000 00F8         delay_ms(1);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00F9         lcd_gotoxy(0,0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00FA         sprintf(sbuf, "Dist:%d mm", distance);  // 거리 값 디스플레이
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00FB         lcd_puts(sbuf);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00FC         delay_ms(50);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00FD 
; 0000 00FE          //Beep Beep
; 0000 00FF          if(distance<200 && distance >=30)
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0100          {
; 0000 0101           PORTD.0=0x01;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0102           delay_ms(distance);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0103           PORTD.0=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0104          }
; 0000 0105          else
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0106          {
; 0000 0107           PORTD.0=0x01;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0108          }
;PCODE: $000000D0 VOL: 0
; 0000 0109 
; 0000 010A 
; 0000 010B         if(distance>30&&distance<70)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 010C         {
; 0000 010D           OCR2 = 254;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 010E           PORTG  = 0xFA;       // 역회전 모드 : 1(1)11 1010
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 010F           delay_ms(1000);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0110           PORTD.0=0x01;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0111 
; 0000 0112           PORTG = 0xF6 ; //1111 0110
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0113           delay_ms(1000);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0114 
; 0000 0115         }
; 0000 0116         else
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0117         {
; 0000 0118          OCR2 = 187;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0119          PORTG  = 0xF5;        // 정회전 모드 : 1(1)11 0101
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 011A         }
;PCODE: $000000ED VOL: 0
; 0000 011B         FFND(distance);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 011C     }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 011D }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;
;// 초음파센서 작동하여 거리 구하기
;int MeasureDistanceByUSS(void)
; 0000 0121 {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0122     static float old_distance = 0.f;
; 0000 0123     float distance;
; 0000 0124     ovf_count = 0;
;PCODE: $000000F8 VOL: 0
;	distance -> Y+0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0125     TIMSK = 0x01;     // timer0 overflow interrupt start
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0126     USTrgger = 1;     // 트리거 펄스(10μs) 발생
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0127     delay_us(10);
;PCODE: $000000FF VOL: 0
; 0000 0128     USTrgger = 0;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0129 
; 0000 012A     while( (USEcho == 0) && (ovf_count <= 2200) ); // 약 12미터가 넘어가면, 루프 탈출
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 012B     rise_time = ovf_count;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 012C     while( (USEcho == 1) && (ovf_count <= 2200) );
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 012D     fall_time = ovf_count;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 012E 
; 0000 012F     TIMSK=0x00;        // timer interrupt stop
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0130     distance = SOUND_SPEED_mm*OVF_PERIOD_s*(fall_time-rise_time)/2.f;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0131     if(distance < 40)
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0132         distance = old_distance;     // 거리 값이 50mm이하이면 이전데이터 리턴
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0133     else
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0134         old_distance = distance;     // 지금의 데이터를 예전 데이터변수로 전달
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0135     return (int)distance;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0136 }
;PCODE: $0000013B VOL: 0
