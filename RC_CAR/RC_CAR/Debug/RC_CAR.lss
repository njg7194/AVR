
RC_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000068e  00000722  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000068e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800184  00800184  000007a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001691  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c03  00000000  00000000  00001ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca4  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  000038a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067f  00000000  00000000  00003c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099e  00000000  00000000  000042bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c1       	rjmp	.+706    	; 0x2dc <__vector_6>
  1a:	00 00       	nop
  1c:	9f c1       	rjmp	.+830    	; 0x35c <__vector_7>
  1e:	00 00       	nop
  20:	e8 c1       	rjmp	.+976    	; 0x3f2 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	fc c1       	rjmp	.+1016   	; 0x472 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 38       	cpi	r26, 0x84	; 132
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e8       	ldi	r26, 0x84	; 132
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 38       	cpi	r26, 0x88	; 136
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3c d2       	rcall	.+1144   	; 0x53c <main>
  c4:	e2 c2       	rjmp	.+1476   	; 0x68a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <whatDirection>:
	else
	return whatDirection(buffer);
}

char whatDirection(const char* data_buffer)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
	if (strstr(data_buffer,"stop"))
  ce:	65 e1       	ldi	r22, 0x15	; 21
  d0:	71 e0       	ldi	r23, 0x01	; 1
  d2:	c1 d2       	rcall	.+1410   	; 0x656 <strstr>
  d4:	89 2b       	or	r24, r25
  d6:	31 f5       	brne	.+76     	; 0x124 <whatDirection+0x5c>
	return 'S';
	else
	{
		if (strstr(data_buffer,"FORWARD"))
  d8:	6a e1       	ldi	r22, 0x1A	; 26
  da:	71 e0       	ldi	r23, 0x01	; 1
  dc:	ce 01       	movw	r24, r28
  de:	bb d2       	rcall	.+1398   	; 0x656 <strstr>
  e0:	89 2b       	or	r24, r25
  e2:	11 f5       	brne	.+68     	; 0x128 <whatDirection+0x60>
		return 'F';
		
		else if(strstr(data_buffer, "LEFT"))
  e4:	62 e2       	ldi	r22, 0x22	; 34
  e6:	71 e0       	ldi	r23, 0x01	; 1
  e8:	ce 01       	movw	r24, r28
  ea:	b5 d2       	rcall	.+1386   	; 0x656 <strstr>
  ec:	89 2b       	or	r24, r25
  ee:	f1 f4       	brne	.+60     	; 0x12c <whatDirection+0x64>
		return 'L';
		
		else if(strstr(data_buffer, "RIGHT"))
  f0:	67 e2       	ldi	r22, 0x27	; 39
  f2:	71 e0       	ldi	r23, 0x01	; 1
  f4:	ce 01       	movw	r24, r28
  f6:	af d2       	rcall	.+1374   	; 0x656 <strstr>
  f8:	89 2b       	or	r24, r25
  fa:	d1 f4       	brne	.+52     	; 0x130 <whatDirection+0x68>
		return 'R';
		
		else if(strstr(data_buffer, "BACKWARD"))
  fc:	6d e2       	ldi	r22, 0x2D	; 45
  fe:	71 e0       	ldi	r23, 0x01	; 1
 100:	ce 01       	movw	r24, r28
 102:	a9 d2       	rcall	.+1362   	; 0x656 <strstr>
 104:	89 2b       	or	r24, r25
 106:	b1 f4       	brne	.+44     	; 0x134 <whatDirection+0x6c>
		return 'B';
		
		else if(strstr(data_buffer, "LEFT_SPEED"))
 108:	66 e3       	ldi	r22, 0x36	; 54
 10a:	71 e0       	ldi	r23, 0x01	; 1
 10c:	ce 01       	movw	r24, r28
 10e:	a3 d2       	rcall	.+1350   	; 0x656 <strstr>
 110:	89 2b       	or	r24, r25
 112:	91 f4       	brne	.+36     	; 0x138 <whatDirection+0x70>
		return '4';
		
		else if(strstr(data_buffer, "RIGHT_SPEED"))
 114:	61 e4       	ldi	r22, 0x41	; 65
 116:	71 e0       	ldi	r23, 0x01	; 1
 118:	ce 01       	movw	r24, r28
 11a:	9d d2       	rcall	.+1338   	; 0x656 <strstr>
 11c:	89 2b       	or	r24, r25
 11e:	71 f4       	brne	.+28     	; 0x13c <whatDirection+0x74>
 120:	80 e0       	ldi	r24, 0x00	; 0
		return '6';
	}
	return 0;
 122:	0d c0       	rjmp	.+26     	; 0x13e <whatDirection+0x76>
 124:	83 e5       	ldi	r24, 0x53	; 83
}

char whatDirection(const char* data_buffer)
{
	if (strstr(data_buffer,"stop"))
	return 'S';
 126:	0b c0       	rjmp	.+22     	; 0x13e <whatDirection+0x76>
 128:	86 e4       	ldi	r24, 0x46	; 70
	else
	{
		if (strstr(data_buffer,"FORWARD"))
		return 'F';
 12a:	09 c0       	rjmp	.+18     	; 0x13e <whatDirection+0x76>
 12c:	8c e4       	ldi	r24, 0x4C	; 76
		
		else if(strstr(data_buffer, "LEFT"))
		return 'L';
 12e:	07 c0       	rjmp	.+14     	; 0x13e <whatDirection+0x76>
 130:	82 e5       	ldi	r24, 0x52	; 82
		
		else if(strstr(data_buffer, "RIGHT"))
		return 'R';
 132:	05 c0       	rjmp	.+10     	; 0x13e <whatDirection+0x76>
 134:	82 e4       	ldi	r24, 0x42	; 66
		
		else if(strstr(data_buffer, "BACKWARD"))
		return 'B';
 136:	03 c0       	rjmp	.+6      	; 0x13e <whatDirection+0x76>
 138:	84 e3       	ldi	r24, 0x34	; 52
		
		else if(strstr(data_buffer, "LEFT_SPEED"))
		return '4';
 13a:	01 c0       	rjmp	.+2      	; 0x13e <whatDirection+0x76>
 13c:	86 e3       	ldi	r24, 0x36	; 54
		
		else if(strstr(data_buffer, "RIGHT_SPEED"))
		return '6';
 13e:	df 91       	pop	r29
	}
	return 0;
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <BLTdiscrimination>:
 144:	cf 93       	push	r28
 *  Author: njg71
 */ 
#include "Bluetooth.h"

char BLTdiscrimination(const char* buffer)
{
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
	if(strstr(buffer, "TOGGLE_AUTO"))
 14a:	6d e4       	ldi	r22, 0x4D	; 77
 14c:	71 e0       	ldi	r23, 0x01	; 1
 14e:	83 d2       	rcall	.+1286   	; 0x656 <strstr>
 150:	89 2b       	or	r24, r25
 152:	19 f4       	brne	.+6      	; 0x15a <BLTdiscrimination+0x16>
	return 'T';
	else
	return whatDirection(buffer);
 154:	ce 01       	movw	r24, r28
 156:	b8 df       	rcall	.-144    	; 0xc8 <whatDirection>
 158:	01 c0       	rjmp	.+2      	; 0x15c <BLTdiscrimination+0x18>
#include "Bluetooth.h"

char BLTdiscrimination(const char* buffer)
{
	if(strstr(buffer, "TOGGLE_AUTO"))
	return 'T';
 15a:	84 e5       	ldi	r24, 0x54	; 84
	else
	return whatDirection(buffer);
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <INT_disableSENSOR>:
 */ 
#include "INTset.h"

void INT_disableSENSOR()
{
	EIMSK &= 0x00;
 162:	89 b7       	in	r24, 0x39	; 57
 164:	19 be       	out	0x39, r1	; 57
 166:	08 95       	ret

00000168 <INT_enableSENSOR>:
}

void INT_enableSENSOR()
{
	EIMSK |= (1<<INT5) | (1<<INT6) | (1<<INT7);
 168:	89 b7       	in	r24, 0x39	; 57
 16a:	80 6e       	ori	r24, 0xE0	; 224
 16c:	89 bf       	out	0x39, r24	; 57
 16e:	08 95       	ret

00000170 <INT_init>:
}

void INT_init()
{
	DDRE = 0x00;
 170:	12 b8       	out	0x02, r1	; 2
	PORTE = 0xFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	83 b9       	out	0x03, r24	; 3
	
	EIMSK |= (1<<INT5) | (1<<INT6) | (1<<INT7);			//INT5,6,7인터럽트 발생 허용
 176:	89 b7       	in	r24, 0x39	; 57
 178:	80 6e       	ori	r24, 0xE0	; 224
 17a:	89 bf       	out	0x39, r24	; 57
	EICRB |= 0x00;										//LOW일때 인터럽트
 17c:	8a b7       	in	r24, 0x3a	; 58
 17e:	8a bf       	out	0x3a, r24	; 58
	sei();
 180:	78 94       	sei
 182:	08 95       	ret

00000184 <LEFT_wheel>:
	if (!speed)
	speed = 255;
	
	LEFT_wheel('B', speed);
	RIGHT_wheel('B', speed);
}
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	67 d0       	rcall	.+206    	; 0x25a <PWMwrite>
 18c:	c6 34       	cpi	r28, 0x46	; 70
 18e:	29 f4       	brne	.+10     	; 0x19a <LEFT_wheel+0x16>
 190:	88 b3       	in	r24, 0x18	; 24
 192:	8c 7f       	andi	r24, 0xFC	; 252
 194:	88 bb       	out	0x18, r24	; 24
 196:	c0 9a       	sbi	0x18, 0	; 24
 198:	0c c0       	rjmp	.+24     	; 0x1b2 <LEFT_wheel+0x2e>
 19a:	c2 34       	cpi	r28, 0x42	; 66
 19c:	29 f4       	brne	.+10     	; 0x1a8 <LEFT_wheel+0x24>
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	8c 7f       	andi	r24, 0xFC	; 252
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	c1 9a       	sbi	0x18, 1	; 24
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <LEFT_wheel+0x2e>
 1a8:	c3 35       	cpi	r28, 0x53	; 83
 1aa:	19 f4       	brne	.+6      	; 0x1b2 <LEFT_wheel+0x2e>
 1ac:	88 b3       	in	r24, 0x18	; 24
 1ae:	8c 7f       	andi	r24, 0xFC	; 252
 1b0:	88 bb       	out	0x18, r24	; 24
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <RIGHT_wheel>:
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	4e d0       	rcall	.+156    	; 0x25a <PWMwrite>
 1be:	c6 34       	cpi	r28, 0x46	; 70
 1c0:	29 f4       	brne	.+10     	; 0x1cc <RIGHT_wheel+0x16>
 1c2:	88 b3       	in	r24, 0x18	; 24
 1c4:	83 7f       	andi	r24, 0xF3	; 243
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	c2 9a       	sbi	0x18, 2	; 24
 1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <RIGHT_wheel+0x2e>
 1cc:	c2 34       	cpi	r28, 0x42	; 66
 1ce:	29 f4       	brne	.+10     	; 0x1da <RIGHT_wheel+0x24>
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	83 7f       	andi	r24, 0xF3	; 243
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	c3 9a       	sbi	0x18, 3	; 24
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <RIGHT_wheel+0x2e>
 1da:	c3 35       	cpi	r28, 0x53	; 83
 1dc:	19 f4       	brne	.+6      	; 0x1e4 <RIGHT_wheel+0x2e>
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	83 7f       	andi	r24, 0xF3	; 243
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <Go_forward>:
 1e8:	cf 93       	push	r28
 1ea:	c8 2f       	mov	r28, r24
 1ec:	81 11       	cpse	r24, r1
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <Go_forward+0xa>
 1f0:	cf ef       	ldi	r28, 0xFF	; 255
 1f2:	6c 2f       	mov	r22, r28
 1f4:	86 e4       	ldi	r24, 0x46	; 70
 1f6:	c6 df       	rcall	.-116    	; 0x184 <LEFT_wheel>
 1f8:	69 e0       	ldi	r22, 0x09	; 9
 1fa:	6c 0f       	add	r22, r28
 1fc:	86 e4       	ldi	r24, 0x46	; 70
 1fe:	db df       	rcall	.-74     	; 0x1b6 <RIGHT_wheel>
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <Go_STOP>:

void Go_STOP()
{
	LEFT_wheel('S',0);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	83 e5       	ldi	r24, 0x53	; 83
 208:	bd df       	rcall	.-134    	; 0x184 <LEFT_wheel>
	RIGHT_wheel('S',0);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	83 e5       	ldi	r24, 0x53	; 83
 20e:	d3 cf       	rjmp	.-90     	; 0x1b6 <RIGHT_wheel>
 210:	08 95       	ret

00000212 <PWM_init>:
 */ 
#include "PWMsetting.h"

void PWM_init(unsigned char port1, unsigned char port2)
{
	DDRB |= (1<< port1) | (1<<port2);				//출력핀 설정
 212:	97 b3       	in	r25, 0x17	; 23
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	a9 01       	movw	r20, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <PWM_init+0xe>
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <PWM_init+0xa>
 224:	49 2b       	or	r20, r25
 226:	02 c0       	rjmp	.+4      	; 0x22c <PWM_init+0x1a>
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <PWM_init+0x16>
 230:	24 2b       	or	r18, r20
 232:	27 bb       	out	0x17, r18	; 23
	
	TCCR0 |= (1<<WGM01) | (1<<WGM00);				//파형생성모드 설정(FastPWM)
 234:	83 b7       	in	r24, 0x33	; 51
 236:	88 64       	ori	r24, 0x48	; 72
 238:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01);							//비교 일치 출력 모드 설정(비반전 모드)
 23a:	83 b7       	in	r24, 0x33	; 51
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= /*(1<<CS02) | (1<<CS01) | */(1<<CS00);	//클럭 설정(분주비1,024)
 240:	83 b7       	in	r24, 0x33	; 51
 242:	81 60       	ori	r24, 0x01	; 1
 244:	83 bf       	out	0x33, r24	; 51
	
	TCCR2 |= (1<<WGM21) | (1<<WGM20);				//파형생성모드 설정(FastPWM)
 246:	85 b5       	in	r24, 0x25	; 37
 248:	88 64       	ori	r24, 0x48	; 72
 24a:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<COM21);							//비교 일치 출력 모드 설정(비반전 모드)
 24c:	85 b5       	in	r24, 0x25	; 37
 24e:	80 62       	ori	r24, 0x20	; 32
 250:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= /*(1<<CS22) | (1<<CS21) | */(1<<CS20);	//클럭 설정(분주비8)
 252:	85 b5       	in	r24, 0x25	; 37
 254:	81 60       	ori	r24, 0x01	; 1
 256:	85 bd       	out	0x25, r24	; 37
 258:	08 95       	ret

0000025a <PWMwrite>:
	//TIMSK |= (1<<OCIE0) | (1<<TOIE0) | (1<<OCIE2) | (1<<TOIE2);	//인터럽트 마스크 개방(미사용)
}

void PWMwrite(unsigned char port, unsigned char value)
{
	if (port==PORTB4)
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	11 f4       	brne	.+4      	; 0x262 <PWMwrite+0x8>
	OCR0=value;
 25e:	61 bf       	out	0x31, r22	; 49
 260:	08 95       	ret
	else
	OCR2=value;
 262:	63 bd       	out	0x23, r22	; 35
 264:	08 95       	ret

00000266 <UART1_init>:
 */ 
#include "UARTsetting.h"

void UART1_init(void)
{
	UBRR1H = 0x00;						//9,600보율로 설정
 266:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;
 26a:	8f ec       	ldi	r24, 0xCF	; 207
 26c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= _BV(U2X1);				//2배속 모드
 270:	eb e9       	ldi	r30, 0x9B	; 155
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	82 60       	ori	r24, 0x02	; 2
 278:	80 83       	st	Z, r24
	UCSR1C |= 0x06;						//비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
 27a:	ed e9       	ldi	r30, 0x9D	; 157
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	86 60       	ori	r24, 0x06	; 6
 282:	80 83       	st	Z, r24
	
	UCSR1B |= _BV(RXEN1);				//송신 허용
 284:	ea e9       	ldi	r30, 0x9A	; 154
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	80 83       	st	Z, r24
	UCSR1B |= _BV(TXEN1);				//수신 허용
 28e:	80 81       	ld	r24, Z
 290:	88 60       	ori	r24, 0x08	; 8
 292:	80 83       	st	Z, r24
	UCSR1B |= _BV(RXCIE0);				//수신 인터럽트 허용
 294:	80 81       	ld	r24, Z
 296:	80 68       	ori	r24, 0x80	; 128
 298:	80 83       	st	Z, r24
 29a:	08 95       	ret

0000029c <UART1_transmit>:

}

void UART1_transmit(unsigned char data)
{
	cli();
 29c:	f8 94       	cli
	while( !(UCSR1A & (1 << UDRE1)) );	//송신 가능 대기
 29e:	eb e9       	ldi	r30, 0x9B	; 155
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	90 81       	ld	r25, Z
 2a4:	95 ff       	sbrs	r25, 5
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <UART1_transmit+0x6>
	UDR1 = data;						//: UDRE1의 값 만큼 1(비트)을 이동시킨다.  UCSR1A레지스터와 같지않으면 계속 실행(대기)한다.
 2a8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	sei();
 2ac:	78 94       	sei
 2ae:	08 95       	ret

000002b0 <UART1_receive>:
}										//  1<<5는 0b00100000이다.	UDRE1의 값이 5지만, 5를 그대로 2진수로 변환하면
										//  0b00000101 이기 때문에 UDRE인 5번째 비트를 나타내지 못한다. 때문에 비트이동으로 비트위치를 표현한다.

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );		//UCSR1A레지스터와 RXC1비트를 비교하며, 같지 않으면 계속 실행(대기)한다
 2b0:	eb e9       	ldi	r30, 0x9B	; 155
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	88 23       	and	r24, r24
 2b8:	ec f7       	brge	.-6      	; 0x2b4 <UART1_receive+0x4>
	return UDR1;						//데이터가 수신되어 읽지 않은 문자가 있으면 RXC1이set되어 반복문을 빠져나오고 리턴값으로
 2ba:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}										//UDR1레지스터를 반환한다.
 2be:	08 95       	ret

000002c0 <UART1_print_string>:

void UART1_print_string(char *str)		//문자열 송신
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
	for(int i = 0; str[i]; i++)			//'\0'문자(끝)을 만날 때까지 반복
 2c6:	88 81       	ld	r24, Y
 2c8:	88 23       	and	r24, r24
 2ca:	29 f0       	breq	.+10     	; 0x2d6 <UART1_print_string+0x16>
 2cc:	21 96       	adiw	r28, 0x01	; 1
	UART1_transmit(str[i]);				//바이트 단위로 출력한다.
 2ce:	e6 df       	rcall	.-52     	; 0x29c <UART1_transmit>
	return UDR1;						//데이터가 수신되어 읽지 않은 문자가 있으면 RXC1이set되어 반복문을 빠져나오고 리턴값으로
}										//UDR1레지스터를 반환한다.

void UART1_print_string(char *str)		//문자열 송신
{
	for(int i = 0; str[i]; i++)			//'\0'문자(끝)을 만날 때까지 반복
 2d0:	89 91       	ld	r24, Y+
 2d2:	81 11       	cpse	r24, r1
 2d4:	fc cf       	rjmp	.-8      	; 0x2ce <UART1_print_string+0xe>
	UART1_transmit(str[i]);				//바이트 단위로 출력한다.
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <__vector_6>:
char COM_IN = 0;										//명령어 도착 알림
char Front_toggle = 1;									//LEFT,FRONT,RIGHT SENSOR TOGGLE
char AUTO_STATE = 0;	
					
ISR(INT5_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	0b b6       	in	r0, 0x3b	; 59
 2e8:	0f 92       	push	r0
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	INT_disableSENSOR();
 302:	2f df       	rcall	.-418    	; 0x162 <INT_disableSENSOR>
	if (AUTO_STATE)
 304:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 308:	88 23       	and	r24, r24
 30a:	59 f0       	breq	.+22     	; 0x322 <__vector_6+0x46>
	{
		RIGHT_wheel('S',0);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	83 e5       	ldi	r24, 0x53	; 83
 310:	52 df       	rcall	.-348    	; 0x1b6 <RIGHT_wheel>
		LEFT_wheel('F',130);
 312:	62 e8       	ldi	r22, 0x82	; 130
 314:	86 e4       	ldi	r24, 0x46	; 70
 316:	36 df       	rcall	.-404    	; 0x184 <LEFT_wheel>
		UART1_print_string("!LEFT!");
 318:	89 e5       	ldi	r24, 0x59	; 89
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	d1 df       	rcall	.-94     	; 0x2c0 <UART1_print_string>
		UART1_transmit('\n');
 31e:	8a e0       	ldi	r24, 0x0A	; 10
 320:	bd df       	rcall	.-134    	; 0x29c <UART1_transmit>
 322:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 324:	81 ee       	ldi	r24, 0xE1	; 225
 326:	94 e0       	ldi	r25, 0x04	; 4
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <__vector_6+0x4c>
 330:	00 c0       	rjmp	.+0      	; 0x332 <__vector_6+0x56>
 332:	00 00       	nop
	}
	_delay_ms(100);
	INT_enableSENSOR();
 334:	19 df       	rcall	.-462    	; 0x168 <INT_enableSENSOR>
 336:	ff 91       	pop	r31
}
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0b be       	out	0x3b, r0	; 59
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <__vector_7>:
 35c:	1f 92       	push	r1
ISR(INT6_vect)
{
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	0b b6       	in	r0, 0x3b	; 59
 368:	0f 92       	push	r0
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	INT_disableSENSOR();
 382:	ef de       	rcall	.-546    	; 0x162 <INT_disableSENSOR>
	if (AUTO_STATE)
 384:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 388:	88 23       	and	r24, r24
 38a:	b1 f0       	breq	.+44     	; 0x3b8 <__vector_7+0x5c>
	{
		if (Front_toggle)
 38c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Front_toggle>
 390:	88 23       	and	r24, r24
 392:	39 f0       	breq	.+14     	; 0x3a2 <__vector_7+0x46>
		{
			RIGHT_wheel('S',0);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	83 e5       	ldi	r24, 0x53	; 83
 398:	0e df       	rcall	.-484    	; 0x1b6 <RIGHT_wheel>
			LEFT_wheel('F',130);
 39a:	62 e8       	ldi	r22, 0x82	; 130
 39c:	86 e4       	ldi	r24, 0x46	; 70
 39e:	f2 de       	rcall	.-540    	; 0x184 <LEFT_wheel>
 3a0:	06 c0       	rjmp	.+12     	; 0x3ae <__vector_7+0x52>
		}
		else
		{
			LEFT_wheel('S',0);
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	83 e5       	ldi	r24, 0x53	; 83
 3a6:	ee de       	rcall	.-548    	; 0x184 <LEFT_wheel>
			RIGHT_wheel('F',140);
 3a8:	6c e8       	ldi	r22, 0x8C	; 140
 3aa:	86 e4       	ldi	r24, 0x46	; 70
 3ac:	04 df       	rcall	.-504    	; 0x1b6 <RIGHT_wheel>
		}
		

		UART1_print_string("!FRONT!");
 3ae:	80 e6       	ldi	r24, 0x60	; 96
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	86 df       	rcall	.-244    	; 0x2c0 <UART1_print_string>
 3b4:	8a e0       	ldi	r24, 0x0A	; 10
		UART1_transmit('\n');
 3b6:	72 df       	rcall	.-284    	; 0x29c <UART1_transmit>
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	81 ee       	ldi	r24, 0xE1	; 225
 3bc:	94 e0       	ldi	r25, 0x04	; 4
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <__vector_7+0x62>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <__vector_7+0x6c>
 3c8:	00 00       	nop
 3ca:	ce de       	rcall	.-612    	; 0x168 <INT_enableSENSOR>
	}
	_delay_ms(100);
	INT_enableSENSOR();
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30

}
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0b be       	out	0x3b, r0	; 59
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <__vector_8>:
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
ISR(INT7_vect)
{
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
 3fc:	0b b6       	in	r0, 0x3b	; 59
 3fe:	0f 92       	push	r0
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	6f 93       	push	r22
 40a:	7f 93       	push	r23
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	af 93       	push	r26
 412:	bf 93       	push	r27
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
	INT_disableSENSOR();
 418:	a4 de       	rcall	.-696    	; 0x162 <INT_disableSENSOR>
	if (AUTO_STATE)
 41a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 41e:	88 23       	and	r24, r24
 420:	59 f0       	breq	.+22     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		LEFT_wheel('S',0);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	83 e5       	ldi	r24, 0x53	; 83
 426:	ae de       	rcall	.-676    	; 0x184 <LEFT_wheel>
		RIGHT_wheel('F',140);
 428:	6c e8       	ldi	r22, 0x8C	; 140
 42a:	86 e4       	ldi	r24, 0x46	; 70
 42c:	c4 de       	rcall	.-632    	; 0x1b6 <RIGHT_wheel>
		UART1_print_string("!RIGHT!");
 42e:	88 e6       	ldi	r24, 0x68	; 104
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	46 df       	rcall	.-372    	; 0x2c0 <UART1_print_string>
		UART1_transmit('\n');
 434:	8a e0       	ldi	r24, 0x0A	; 10
 436:	32 df       	rcall	.-412    	; 0x29c <UART1_transmit>
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	81 ee       	ldi	r24, 0xE1	; 225
 43c:	94 e0       	ldi	r25, 0x04	; 4
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 448:	00 00       	nop
	}
	_delay_ms(100);
	INT_enableSENSOR();
 44a:	8e de       	rcall	.-740    	; 0x168 <INT_enableSENSOR>
 44c:	ff 91       	pop	r31
}
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0b be       	out	0x3b, r0	; 59
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <__vector_30>:
 472:	1f 92       	push	r1

ISR(USART1_RX_vect)
{
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	0b b6       	in	r0, 0x3b	; 59
 47e:	0f 92       	push	r0
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
	cli();
 498:	f8 94       	cli
	char data = UART1_receive();
 49a:	0a df       	rcall	.-492    	; 0x2b0 <UART1_receive>
	if (data =='@')
 49c:	80 34       	cpi	r24, 0x40	; 64
 49e:	79 f4       	brne	.+30     	; 0x4be <__vector_30+0x4c>
	{
		buffer[index] = '\0';
 4a0:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <index>
 4a4:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <index+0x1>
 4a8:	ef 5f       	subi	r30, 0xFF	; 255
 4aa:	fe 4f       	sbci	r31, 0xFE	; 254
 4ac:	10 82       	st	Z, r1
		index = 0;
 4ae:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <index+0x1>
 4b2:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <index>
		COM_IN = 1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <COM_IN>
 4bc:	2b c0       	rjmp	.+86     	; 0x514 <__vector_30+0xa2>
	}
	else
	{
		if (index==0)
 4be:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <index>
 4c2:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <index+0x1>
 4c6:	23 2b       	or	r18, r19
 4c8:	a9 f4       	brne	.+42     	; 0x4f4 <__vector_30+0x82>
		{
			for(int i = 0;i<index;i++)
 4ca:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <index>
 4ce:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <index+0x1>
 4d2:	12 16       	cp	r1, r18
 4d4:	13 06       	cpc	r1, r19
 4d6:	74 f4       	brge	.+28     	; 0x4f4 <__vector_30+0x82>
 4d8:	e1 e0       	ldi	r30, 0x01	; 1
 4da:	f1 e0       	ldi	r31, 0x01	; 1
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
			buffer[i]=NULL;
 4e0:	11 92       	st	Z+, r1
	}
	else
	{
		if (index==0)
		{
			for(int i = 0;i<index;i++)
 4e2:	2f 5f       	subi	r18, 0xFF	; 255
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
 4e6:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <index>
 4ea:	50 91 87 01 	lds	r21, 0x0187	; 0x800187 <index+0x1>
 4ee:	24 17       	cp	r18, r20
 4f0:	35 07       	cpc	r19, r21
 4f2:	b4 f3       	brlt	.-20     	; 0x4e0 <__vector_30+0x6e>
			buffer[i]=NULL;
		}
		buffer[index] = data;
 4f4:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <index>
 4f8:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <index+0x1>
 4fc:	ef 5f       	subi	r30, 0xFF	; 255
 4fe:	fe 4f       	sbci	r31, 0xFE	; 254
 500:	80 83       	st	Z, r24
		index++;
 502:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <index>
 506:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <index+0x1>
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <index+0x1>
 510:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <index>
	}
	sei();
 514:	78 94       	sei
}
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	bf 91       	pop	r27
 51c:	af 91       	pop	r26
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	7f 91       	pop	r23
 524:	6f 91       	pop	r22
 526:	5f 91       	pop	r21
 528:	4f 91       	pop	r20
 52a:	3f 91       	pop	r19
 52c:	2f 91       	pop	r18
 52e:	0f 90       	pop	r0
 530:	0b be       	out	0x3b, r0	; 59
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <main>:

int main(void)
{
	INT_init();
 53c:	19 de       	rcall	.-974    	; 0x170 <INT_init>
	UART1_init();
 53e:	93 de       	rcall	.-730    	; 0x266 <UART1_init>
 540:	67 e0       	ldi	r22, 0x07	; 7
	PWM_init(LEFTWHEEL,RIGHTWHEEL);
 542:	84 e0       	ldi	r24, 0x04	; 4
 544:	66 de       	rcall	.-820    	; 0x212 <PWM_init>
	INT_disableSENSOR();
 546:	0d de       	rcall	.-998    	; 0x162 <INT_disableSENSOR>
 548:	d0 e0       	ldi	r29, 0x00	; 0
				
			Go_forward(AUTO_SPEED);
			if (Front_toggle)
			Front_toggle = 0;
			else
			Front_toggle = 1;
 54a:	11 e0       	ldi	r17, 0x01	; 1
	char COMMAND;
	char AUTO_SPEED=0;
    while (1) 
    {

		COMMAND = BLTdiscrimination(buffer);			//버퍼 데이터를 문자 커멘드로 변환						
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	f9 dd       	rcall	.-1038   	; 0x144 <BLTdiscrimination>
 552:	c8 2f       	mov	r28, r24
 554:	84 35       	cpi	r24, 0x54	; 84

		if ((COMMAND == 'T') && (COM_IN && 1))			// 자동운전 상태 토글 명령어 수신했을 경우
 556:	09 f0       	breq	.+2      	; 0x55a <main+0x1e>
 558:	78 c0       	rjmp	.+240    	; 0x64a <main+0x10e>
 55a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <COM_IN>
 55e:	88 23       	and	r24, r24
 560:	09 f4       	brne	.+2      	; 0x564 <main+0x28>
 562:	6e c0       	rjmp	.+220    	; 0x640 <main+0x104>
 564:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <COM_IN>
		{
			COM_IN = 0;									//명령 도착 알림 제거
 568:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
			AUTO_STATE = !AUTO_STATE;					//명령 : T(toggle)자동운전 제어 변수를 토글한다.
 56c:	91 2f       	mov	r25, r17
 56e:	81 11       	cpse	r24, r1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <__data_end>
			
			if (AUTO_STATE==1)
 576:	81 11       	cpse	r24, r1
			{
				UART1_print_string("NOW IS AUTO DRIVING");
 578:	07 c0       	rjmp	.+14     	; 0x588 <main+0x4c>
 57a:	80 e7       	ldi	r24, 0x70	; 112
				UART1_transmit('\n');
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	a0 de       	rcall	.-704    	; 0x2c0 <UART1_print_string>
 580:	8a e0       	ldi	r24, 0x0A	; 10
				INT_enableSENSOR();
 582:	8c de       	rcall	.-744    	; 0x29c <UART1_transmit>
 584:	f1 dd       	rcall	.-1054   	; 0x168 <INT_enableSENSOR>
 586:	02 c0       	rjmp	.+4      	; 0x58c <main+0x50>
			}
			else
			{
				Go_STOP();
 588:	3d de       	rcall	.-902    	; 0x204 <Go_STOP>
 58a:	eb dd       	rcall	.-1066   	; 0x162 <INT_disableSENSOR>
				INT_disableSENSOR();
 58c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
			}
			
		}
		
		
		if (!AUTO_STATE)									//자동운전이 아닐 경우
 590:	81 11       	cpse	r24, r1
 592:	41 c0       	rjmp	.+130    	; 0x616 <main+0xda>
 594:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <COM_IN>
		{
			if (COM_IN)
 598:	88 23       	and	r24, r24
 59a:	09 f4       	brne	.+2      	; 0x59e <main+0x62>
 59c:	4a c0       	rjmp	.+148    	; 0x632 <main+0xf6>
 59e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <COM_IN>
			{
				COM_IN = 0;									//명령 도착 알림 제거
 5a2:	cc 34       	cpi	r28, 0x4C	; 76
 5a4:	e9 f0       	breq	.+58     	; 0x5e0 <main+0xa4>
				switch(COMMAND)								//명령어 선택
 5a6:	28 f4       	brcc	.+10     	; 0x5b2 <main+0x76>
 5a8:	c2 34       	cpi	r28, 0x42	; 66
 5aa:	61 f1       	breq	.+88     	; 0x604 <main+0xc8>
 5ac:	c6 34       	cpi	r28, 0x46	; 70
 5ae:	79 f0       	breq	.+30     	; 0x5ce <main+0x92>
 5b0:	40 c0       	rjmp	.+128    	; 0x632 <main+0xf6>
 5b2:	c2 35       	cpi	r28, 0x52	; 82
 5b4:	f1 f0       	breq	.+60     	; 0x5f2 <main+0xb6>
 5b6:	c3 35       	cpi	r28, 0x53	; 83
 5b8:	09 f0       	breq	.+2      	; 0x5bc <main+0x80>
				{
				case 'S':
				UART1_transmit('S');
 5ba:	3b c0       	rjmp	.+118    	; 0x632 <main+0xf6>
 5bc:	83 e5       	ldi	r24, 0x53	; 83
				LEFT_wheel(STOP, 0);
 5be:	6e de       	rcall	.-804    	; 0x29c <UART1_transmit>
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	83 e5       	ldi	r24, 0x53	; 83
				RIGHT_wheel(STOP, 0);
 5c4:	df dd       	rcall	.-1090   	; 0x184 <LEFT_wheel>
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	83 e5       	ldi	r24, 0x53	; 83
				break;
 5ca:	f5 dd       	rcall	.-1046   	; 0x1b6 <RIGHT_wheel>
				
				case 'F':
				UART1_transmit('F');
 5cc:	32 c0       	rjmp	.+100    	; 0x632 <main+0xf6>
 5ce:	86 e4       	ldi	r24, 0x46	; 70
				LEFT_wheel(FORWARD, 200);
 5d0:	65 de       	rcall	.-822    	; 0x29c <UART1_transmit>
 5d2:	68 ec       	ldi	r22, 0xC8	; 200
 5d4:	86 e4       	ldi	r24, 0x46	; 70
				RIGHT_wheel(FORWARD, 217);
 5d6:	d6 dd       	rcall	.-1108   	; 0x184 <LEFT_wheel>
 5d8:	69 ed       	ldi	r22, 0xD9	; 217
 5da:	86 e4       	ldi	r24, 0x46	; 70
				break;
 5dc:	ec dd       	rcall	.-1064   	; 0x1b6 <RIGHT_wheel>
				
				case 'L':
				UART1_transmit('L');
 5de:	29 c0       	rjmp	.+82     	; 0x632 <main+0xf6>
 5e0:	8c e4       	ldi	r24, 0x4C	; 76
				LEFT_wheel(BACKWARD, 160);
 5e2:	5c de       	rcall	.-840    	; 0x29c <UART1_transmit>
 5e4:	60 ea       	ldi	r22, 0xA0	; 160
 5e6:	82 e4       	ldi	r24, 0x42	; 66
				RIGHT_wheel(FORWARD, 160);
 5e8:	cd dd       	rcall	.-1126   	; 0x184 <LEFT_wheel>
 5ea:	60 ea       	ldi	r22, 0xA0	; 160
 5ec:	86 e4       	ldi	r24, 0x46	; 70
				break;
 5ee:	e3 dd       	rcall	.-1082   	; 0x1b6 <RIGHT_wheel>
				
				case 'R':
				UART1_transmit('R');
 5f0:	20 c0       	rjmp	.+64     	; 0x632 <main+0xf6>
 5f2:	82 e5       	ldi	r24, 0x52	; 82
 5f4:	53 de       	rcall	.-858    	; 0x29c <UART1_transmit>
				LEFT_wheel(FORWARD, 160);
 5f6:	60 ea       	ldi	r22, 0xA0	; 160
 5f8:	86 e4       	ldi	r24, 0x46	; 70
 5fa:	c4 dd       	rcall	.-1144   	; 0x184 <LEFT_wheel>
				RIGHT_wheel(BACKWARD, 160);
 5fc:	60 ea       	ldi	r22, 0xA0	; 160
 5fe:	82 e4       	ldi	r24, 0x42	; 66
 600:	da dd       	rcall	.-1100   	; 0x1b6 <RIGHT_wheel>
 602:	17 c0       	rjmp	.+46     	; 0x632 <main+0xf6>
				break;
 604:	82 e4       	ldi	r24, 0x42	; 66
				
				case 'B':
				UART1_transmit('B');
 606:	4a de       	rcall	.-876    	; 0x29c <UART1_transmit>
 608:	68 ec       	ldi	r22, 0xC8	; 200
 60a:	82 e4       	ldi	r24, 0x42	; 66
				LEFT_wheel(BACKWARD, 200);
 60c:	bb dd       	rcall	.-1162   	; 0x184 <LEFT_wheel>
 60e:	62 ed       	ldi	r22, 0xD2	; 210
 610:	82 e4       	ldi	r24, 0x42	; 66
 612:	d1 dd       	rcall	.-1118   	; 0x1b6 <RIGHT_wheel>
				RIGHT_wheel(BACKWARD, 210);
 614:	0e c0       	rjmp	.+28     	; 0x632 <main+0xf6>
 616:	d7 38       	cpi	r29, 0x87	; 135
 618:	09 f0       	breq	.+2      	; 0x61c <main+0xe0>
 61a:	df 5f       	subi	r29, 0xFF	; 255
				break;
 61c:	8d 2f       	mov	r24, r29
			}
			
		}
		else if (AUTO_STATE)				//자동운전일 경우
		{
			if (AUTO_SPEED!=135)
 61e:	e4 dd       	rcall	.-1080   	; 0x1e8 <Go_forward>
 620:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Front_toggle>
				AUTO_SPEED++;
				
			Go_forward(AUTO_SPEED);
 624:	88 23       	and	r24, r24
 626:	19 f0       	breq	.+6      	; 0x62e <main+0xf2>
 628:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Front_toggle>
			if (Front_toggle)
 62c:	02 c0       	rjmp	.+4      	; 0x632 <main+0xf6>
 62e:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <Front_toggle>
			Front_toggle = 0;
 632:	8f e9       	ldi	r24, 0x9F	; 159
 634:	9f e0       	ldi	r25, 0x0F	; 15
 636:	01 97       	sbiw	r24, 0x01	; 1
			else
			Front_toggle = 1;
 638:	f1 f7       	brne	.-4      	; 0x636 <main+0xfa>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <main+0x100>
 63c:	00 00       	nop
 63e:	86 cf       	rjmp	.-244    	; 0x54c <main+0x10>
 640:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 644:	81 11       	cpse	r24, r1
 646:	e7 cf       	rjmp	.-50     	; 0x616 <main+0xda>
 648:	f4 cf       	rjmp	.-24     	; 0x632 <main+0xf6>
			}
			
		}
		
		
		if (!AUTO_STATE)									//자동운전이 아닐 경우
 64a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 64e:	88 23       	and	r24, r24
 650:	09 f4       	brne	.+2      	; 0x654 <main+0x118>
 652:	a0 cf       	rjmp	.-192    	; 0x594 <main+0x58>
 654:	e0 cf       	rjmp	.-64     	; 0x616 <main+0xda>

00000656 <strstr>:
 656:	fb 01       	movw	r30, r22
 658:	51 91       	ld	r21, Z+
 65a:	55 23       	and	r21, r21
 65c:	a9 f0       	breq	.+42     	; 0x688 <strstr+0x32>
 65e:	bf 01       	movw	r22, r30
 660:	dc 01       	movw	r26, r24
 662:	4d 91       	ld	r20, X+
 664:	45 17       	cp	r20, r21
 666:	41 11       	cpse	r20, r1
 668:	e1 f7       	brne	.-8      	; 0x662 <strstr+0xc>
 66a:	59 f4       	brne	.+22     	; 0x682 <strstr+0x2c>
 66c:	cd 01       	movw	r24, r26
 66e:	01 90       	ld	r0, Z+
 670:	00 20       	and	r0, r0
 672:	49 f0       	breq	.+18     	; 0x686 <strstr+0x30>
 674:	4d 91       	ld	r20, X+
 676:	40 15       	cp	r20, r0
 678:	41 11       	cpse	r20, r1
 67a:	c9 f3       	breq	.-14     	; 0x66e <strstr+0x18>
 67c:	fb 01       	movw	r30, r22
 67e:	41 11       	cpse	r20, r1
 680:	ef cf       	rjmp	.-34     	; 0x660 <strstr+0xa>
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	08 95       	ret

0000068a <_exit>:
 68a:	f8 94       	cli

0000068c <__stop_program>:
 68c:	ff cf       	rjmp	.-2      	; 0x68c <__stop_program>
