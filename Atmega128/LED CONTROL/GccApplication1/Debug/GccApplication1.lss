
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a09  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d1  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c8  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  00001cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 30       	cpi	r26, 0x09	; 9
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	38 d0       	rcall	.+112    	; 0x11a <main>
  aa:	5c c0       	rjmp	.+184    	; 0x164 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <led_strip_write>:
  0 pulse  = 400 ns
  1 pulse  = 850 ns
  "period" = 1300 ns
 */
void __attribute__((noinline)) led_strip_write(rgb_color * colors, unsigned int count) 
{
  ae:	fc 01       	movw	r30, r24
  // 핀을 LOW로 설정합니다.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
  b0:	a8 98       	cbi	0x15, 0	; 21
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);
  b2:	a0 9a       	sbi	0x14, 0	; 20

  cli();   // 펄스 타이밍이 엉망이 되는 것을 원치 않기 때문에 인터럽트를 일시적으로 비활성화합니다.
  b4:	f8 94       	cli
  while(count--)
  b6:	9b 01       	movw	r18, r22
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
  bc:	67 2b       	or	r22, r23
  be:	09 f4       	brne	.+2      	; 0xc2 <led_strip_write+0x14>
  c0:	24 c0       	rjmp	.+72     	; 0x10a <led_strip_asm_end28+0x8>
  {
    // LED strip으로 색상을 보냅니다.
    // 또한 아래의 어셈블리는 'color'포인터를 증가시키며,
    // 이 루프의 끝에 있는 다음 색상을 가리킵니다.
    asm volatile(
  c2:	01 90       	ld	r0, Z+
  c4:	00 80       	ld	r0, Z
  c6:	07 d0       	rcall	.+14     	; 0xd6 <send_led_strip_byte28>
  c8:	02 90       	ld	r0, -Z
  ca:	05 d0       	rcall	.+10     	; 0xd6 <send_led_strip_byte28>
  cc:	01 90       	ld	r0, Z+
  ce:	01 90       	ld	r0, Z+
  d0:	01 90       	ld	r0, Z+
  d2:	01 d0       	rcall	.+2      	; 0xd6 <send_led_strip_byte28>
  d4:	16 c0       	rjmp	.+44     	; 0x102 <led_strip_asm_end28>

000000d6 <send_led_strip_byte28>:
  d6:	07 d0       	rcall	.+14     	; 0xe6 <send_led_strip_bit28>
  d8:	06 d0       	rcall	.+12     	; 0xe6 <send_led_strip_bit28>
  da:	05 d0       	rcall	.+10     	; 0xe6 <send_led_strip_bit28>
  dc:	04 d0       	rcall	.+8      	; 0xe6 <send_led_strip_bit28>
  de:	03 d0       	rcall	.+6      	; 0xe6 <send_led_strip_bit28>
  e0:	02 d0       	rcall	.+4      	; 0xe6 <send_led_strip_bit28>
  e2:	01 d0       	rcall	.+2      	; 0xe6 <send_led_strip_bit28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <send_led_strip_bit28>

000000e6 <send_led_strip_bit28>:
  e6:	a8 9a       	sbi	0x15, 0	; 21
  e8:	00 1c       	adc	r0, r0
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	08 f0       	brcs	.+2      	; 0xf2 <send_led_strip_bit28+0xc>
  f0:	a8 98       	cbi	0x15, 0	; 21
	...
  fa:	00 00       	nop
  fc:	08 f4       	brcc	.+2      	; 0x100 <send_led_strip_bit28+0x1a>
  fe:	a8 98       	cbi	0x15, 0	; 21
 100:	08 95       	ret

00000102 <led_strip_asm_end28>:
  // 핀을 LOW로 설정합니다.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);

  cli();   // 펄스 타이밍이 엉망이 되는 것을 원치 않기 때문에 인터럽트를 일시적으로 비활성화합니다.
  while(count--)
 102:	21 50       	subi	r18, 0x01	; 1
 104:	31 09       	sbc	r19, r1
 106:	08 f0       	brcs	.+2      	; 0x10a <led_strip_asm_end28+0x8>
 108:	dc cf       	rjmp	.-72     	; 0xc2 <led_strip_write+0x14>
    );

    // 각 색상 간의 언터럽트를 일시적으로 활성화하려면 아래의 주석을 해제하십시오.
    //sei(); asm volatile("nop\n"); cli();
  }
  sei();          // 끝났으니 인터럽트 허용함.
 10a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <led_strip_asm_end28+0xe>
 114:	00 c0       	rjmp	.+0      	; 0x116 <led_strip_asm_end28+0x14>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <main>:
	{
		unsigned int i;
		for(i = 0; i < LED_COUNT; i++)
		{
			unsigned char x = 8*i;
			colors[i] = (rgb_color){ x, 255 - x, x };
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d1 e0       	ldi	r29, 0x01	; 1
 11e:	dd 24       	eor	r13, r13
 120:	da 94       	dec	r13
 122:	08 e0       	ldi	r16, 0x08	; 8
 124:	0f 2e       	mov	r0, r31
 126:	f7 ef       	ldi	r31, 0xF7	; 247
 128:	ef 2e       	mov	r14, r31
 12a:	f0 2d       	mov	r31, r0
 12c:	10 e1       	ldi	r17, 0x10	; 16
 12e:	0f 2e       	mov	r0, r31
 130:	ff ee       	ldi	r31, 0xEF	; 239
 132:	ff 2e       	mov	r15, r31
 134:	f0 2d       	mov	r31, r0
 136:	18 82       	st	Y, r1
 138:	d9 82       	std	Y+1, r13	; 0x01
 13a:	1a 82       	std	Y+2, r1	; 0x02
 13c:	0b 83       	std	Y+3, r16	; 0x03
 13e:	ec 82       	std	Y+4, r14	; 0x04
 140:	0d 83       	std	Y+5, r16	; 0x05
 142:	1e 83       	std	Y+6, r17	; 0x06
 144:	ff 82       	std	Y+7, r15	; 0x07
 146:	18 87       	std	Y+8, r17	; 0x08
		}

		led_strip_write(colors, LED_COUNT);
 148:	63 e0       	ldi	r22, 0x03	; 3
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	ce 01       	movw	r24, r28
 14e:	af df       	rcall	.-162    	; 0xae <led_strip_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x3c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x46>
 160:	00 00       	nop
 162:	e9 cf       	rjmp	.-46     	; 0x136 <main+0x1c>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
