
ATmega128 Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000948  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000832  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a8  00000000  00000000  00001aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	18 d0       	rcall	.+48     	; 0xca <main>
  9a:	40 c0       	rjmp	.+128    	; 0x11c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <byte_out>:
#define nop8 {nop2; nop2; nop2; nop2;}
//
#define ws2812b_1  PORTB|=4  //PORTB.2
#define ws2812b_0  PORTB&=~4 //PORTB.2
//
void byte_out(unsigned char d){
  9e:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i;
	for(i=0;i<8;i++){
		if(d&0x80){ ws2812b_1; nop8; ws2812b_0; }
  a0:	88 23       	and	r24, r24
  a2:	5c f4       	brge	.+22     	; 0xba <byte_out+0x1c>
  a4:	c2 9a       	sbi	0x18, 2	; 24
	...
  b6:	c2 98       	cbi	0x18, 2	; 24
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <byte_out+0x24>
		else      { ws2812b_1; nop2; ws2812b_0; }
  ba:	c2 9a       	sbi	0x18, 2	; 24
  bc:	00 00       	nop
  be:	00 00       	nop
  c0:	c2 98       	cbi	0x18, 2	; 24
		d<<=1;
  c2:	88 0f       	add	r24, r24
  c4:	91 50       	subi	r25, 0x01	; 1
#define ws2812b_1  PORTB|=4  //PORTB.2
#define ws2812b_0  PORTB&=~4 //PORTB.2
//
void byte_out(unsigned char d){
	unsigned char i;
	for(i=0;i<8;i++){
  c6:	61 f7       	brne	.-40     	; 0xa0 <byte_out+0x2>
		if(d&0x80){ ws2812b_1; nop8; ws2812b_0; }
		else      { ws2812b_1; nop2; ws2812b_0; }
		d<<=1;
	}
}
  c8:	08 95       	ret

000000ca <main>:
//
int main(void){
	int x,y,z;
	unsigned char r,g,b;
	DDRB=4;
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	87 bb       	out	0x17, r24	; 23
	//
	while(1){
		for(x=0;x<256;x++){
  ce:	e1 2c       	mov	r14, r1
  d0:	f1 2c       	mov	r15, r1
  d2:	21 c0       	rjmp	.+66     	; 0x116 <main+0x4c>
			for(y=0;y<256;y++){
				for(z=0;z<256;z++){
					g=(unsigned char)y; r=(unsigned char)x; b=(unsigned char)z;
					byte_out(g);        byte_out(r);        byte_out(b);
  d4:	80 2f       	mov	r24, r16
  d6:	e3 df       	rcall	.-58     	; 0x9e <byte_out>
  d8:	8e 2d       	mov	r24, r14
  da:	e1 df       	rcall	.-62     	; 0x9e <byte_out>
  dc:	8c 2f       	mov	r24, r28
  de:	df df       	rcall	.-66     	; 0x9e <byte_out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f e3       	ldi	r24, 0x3F	; 63
  e2:	9c e9       	ldi	r25, 0x9C	; 156
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x1a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x20>
  ea:	00 00       	nop
	DDRB=4;
	//
	while(1){
		for(x=0;x<256;x++){
			for(y=0;y<256;y++){
				for(z=0;z<256;z++){
  ec:	21 96       	adiw	r28, 0x01	; 1
  ee:	c1 15       	cp	r28, r1
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	d9 07       	cpc	r29, r25
  f4:	79 f7       	brne	.-34     	; 0xd4 <main+0xa>
	unsigned char r,g,b;
	DDRB=4;
	//
	while(1){
		for(x=0;x<256;x++){
			for(y=0;y<256;y++){
  f6:	0f 5f       	subi	r16, 0xFF	; 255
  f8:	1f 4f       	sbci	r17, 0xFF	; 255
  fa:	01 15       	cp	r16, r1
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	18 07       	cpc	r17, r24
 100:	19 f0       	breq	.+6      	; 0x108 <main+0x3e>
		else      { ws2812b_1; nop2; ws2812b_0; }
		d<<=1;
	}
}
//
int main(void){
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	e6 cf       	rjmp	.-52     	; 0xd4 <main+0xa>
	int x,y,z;
	unsigned char r,g,b;
	DDRB=4;
	//
	while(1){
		for(x=0;x<256;x++){
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	e9 1a       	sub	r14, r25
 10c:	f9 0a       	sbc	r15, r25
 10e:	e1 14       	cp	r14, r1
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	f8 06       	cpc	r15, r24
 114:	e1 f2       	breq	.-72     	; 0xce <main+0x4>
		else      { ws2812b_1; nop2; ws2812b_0; }
		d<<=1;
	}
}
//
int main(void){
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	f3 cf       	rjmp	.-26     	; 0x102 <main+0x38>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
