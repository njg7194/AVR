
Control LED use Potentiometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000746  000007da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080013a  0080013a  00000814  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c91  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a88  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000531  00000000  00000000  00002041  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000386  00000000  00000000  00002bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e3       	ldi	r26, 0x3A	; 58
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	13 d0       	rcall	.+38     	; 0xea <main>
  c4:	3e c3       	rjmp	.+1660   	; 0x742 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
FILE INPUT 
	= FDEV_SETUP_STREAM(NULL, UART1_receive, _FDEV_SETUP_READ);

void ADC_init(unsigned char channel)
{
	ADMUX |= (1 << REFS0);				//AVCC를 기준 전압으로 선택
  c8:	3e 9a       	sbi	0x07, 6	; 7
	
	ADCSRA |= 0x07;
  ca:	96 b1       	in	r25, 0x06	; 6
  cc:	97 60       	ori	r25, 0x07	; 7
  ce:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= (1 << ADEN);				//7 ADC활성화
  d0:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1 << ADFR);				//5 프리러닝 모드
  d2:	35 9a       	sbi	0x06, 5	; 6
	
	ADMUX = ((ADMUX & 0xE0) | channel);	//채널 선택
  d4:	97 b1       	in	r25, 0x07	; 7
  d6:	90 7e       	andi	r25, 0xE0	; 224
  d8:	89 2b       	or	r24, r25
  da:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);				//변환 시작
  dc:	36 9a       	sbi	0x06, 6	; 6
  de:	08 95       	ret

000000e0 <read_ADC>:
}

int read_ADC(void)
{
	while (!(ADCSRA & (1 << ADIF)));	//ADIF는 상수4이다. 1을 4자리만큼 비트쉬프트하면 0b00000001에서 0b00010000이 된다.
  e0:	34 9b       	sbis	0x06, 4	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <read_ADC>
										//0~8번비트중 4번비트(5번째)인 ADIF를 지칭한다.
										//코드는 ADIF와 ADCSRA를 비교해 값이 참이 '아닐' 경우 무한루프. (ADIF는 AD변환이 종료되고 데이터 레지스터가 업데이트되면 1로 set)
	return ADC;							//결론 : 4번째 비트가 1인지 ADCSRA와 계속 비교하며, 조건문이 거짓일경우 탈출.
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	95 b1       	in	r25, 0x05	; 5
}
  e8:	08 95       	ret

000000ea <main>:

int main(void)
{
	int read;
	
	stdout = &OUTPUT;
  ea:	ea e3       	ldi	r30, 0x3A	; 58
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	8e e0       	ldi	r24, 0x0E	; 14
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	93 83       	std	Z+3, r25	; 0x03
  f4:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	91 83       	std	Z+1, r25	; 0x01
  fc:	80 83       	st	Z, r24
	
	UART1_init();						//UART통신 초기화
  fe:	39 d0       	rcall	.+114    	; 0x172 <UART1_init>
	ADC_init(1);						//ADC변환 초기화(프리러닝)
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	e2 df       	rcall	.-60     	; 0xc8 <ADC_init>
	
	DDRE = 0xFF;						//0b11111111 (255)포트 B를 출력으로 설정
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	82 b9       	out	0x02, r24	; 2
											//필요 저장공간이 8비트를 초과하기 때문에 int형으로 선언한다.
											//+1은 8개의LED가 모두 켜지기 위한, 그리고 최소 1개는 켜지기 위한 덧샘이다.
		
		for (int i = 0; i< LED_count; i++)	//LED_count 보다 i값이 커질때까지 반복한다.
		{
			pattern |= (0x01 << i);			//LED_count의 값 만큼 pattern을 1로만든다.
 108:	c1 e0       	ldi	r28, 0x01	; 1
 10a:	d0 e0       	ldi	r29, 0x00	; 0
											//    결과로 변수 pattern은 0x0f(0b1111)의 값을 가진다.
		}
		
		PORTE = pattern;					//PORTB 레지스터를 0000 1111 로 set. 4개의 LED점등.
		
		printf("Read : %d,\t%d LEDs are ON!\r\n", read, LED_count);
 10c:	0c e1       	ldi	r16, 0x1C	; 28
	
	DDRE = 0xFF;						//0b11111111 (255)포트 B를 출력으로 설정
	
    while (1) 
    {
		read = read_ADC();				//가변저항 값 읽기 (1~1024)
 10e:	11 e0       	ldi	r17, 0x01	; 1
 110:	e7 df       	rcall	.-50     	; 0xe0 <read_ADC>
 112:	fc 01       	movw	r30, r24
		
		uint8_t pattern = 0;			//uint8_t = unsigned char (0~255)
		int LED_count = read >> 7;//)+ 1;	//ADC로 읽어들인 값을 오른쪽으로 7만큼 비트쉬프트 한다. (Atmega128의 ADC는 10bit의 분해능을 가진다.)
 114:	bc 01       	movw	r22, r24
 116:	66 0f       	add	r22, r22
 118:	67 2f       	mov	r22, r23
 11a:	66 1f       	adc	r22, r22
 11c:	77 0b       	sbc	r23, r23
											//예) 598 = 10 0101 0110 =bit shift=> 00 0000 0100 으로 상수값 4이다.
											//필요 저장공간이 8비트를 초과하기 때문에 int형으로 선언한다.
											//+1은 8개의LED가 모두 켜지기 위한, 그리고 최소 1개는 켜지기 위한 덧샘이다.
		
		for (int i = 0; i< LED_count; i++)	//LED_count 보다 i값이 커질때까지 반복한다.
 11e:	16 16       	cp	r1, r22
 120:	17 06       	cpc	r1, r23
 122:	8c f4       	brge	.+34     	; 0x146 <main+0x5c>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
		{
			pattern |= (0x01 << i);			//LED_count의 값 만큼 pattern을 1로만든다.
 12a:	ae 01       	movw	r20, r28
 12c:	02 2e       	mov	r0, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0x4a>
 130:	44 0f       	add	r20, r20
 132:	55 1f       	adc	r21, r21
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <main+0x46>
 138:	94 2b       	or	r25, r20
		int LED_count = read >> 7;//)+ 1;	//ADC로 읽어들인 값을 오른쪽으로 7만큼 비트쉬프트 한다. (Atmega128의 ADC는 10bit의 분해능을 가진다.)
											//예) 598 = 10 0101 0110 =bit shift=> 00 0000 0100 으로 상수값 4이다.
											//필요 저장공간이 8비트를 초과하기 때문에 int형으로 선언한다.
											//+1은 8개의LED가 모두 켜지기 위한, 그리고 최소 1개는 켜지기 위한 덧샘이다.
		
		for (int i = 0; i< LED_count; i++)	//LED_count 보다 i값이 커질때까지 반복한다.
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	62 17       	cp	r22, r18
 140:	73 07       	cpc	r23, r19
 142:	99 f7       	brne	.-26     	; 0x12a <main+0x40>
 144:	01 c0       	rjmp	.+2      	; 0x148 <main+0x5e>
	
    while (1) 
    {
		read = read_ADC();				//가변저항 값 읽기 (1~1024)
		
		uint8_t pattern = 0;			//uint8_t = unsigned char (0~255)
 146:	90 e0       	ldi	r25, 0x00	; 0
											//ex) LED_count=4 일 경우
											//    1 과 0을 or 연산, 10과 1을 or연산, 100과 11을 or연산, 1000과 111을 or연산. 총 4번 반복
											//    결과로 변수 pattern은 0x0f(0b1111)의 값을 가진다.
		}
		
		PORTE = pattern;					//PORTB 레지스터를 0000 1111 로 set. 4개의 LED점등.
 148:	93 b9       	out	0x03, r25	; 3
		
		printf("Read : %d,\t%d LEDs are ON!\r\n", read, LED_count);
 14a:	7f 93       	push	r23
 14c:	6f 93       	push	r22
 14e:	ff 93       	push	r31
 150:	ef 93       	push	r30
 152:	1f 93       	push	r17
 154:	0f 93       	push	r16
 156:	35 d0       	rcall	.+106    	; 0x1c2 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	9e e4       	ldi	r25, 0x4E	; 78
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x72>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x78>
 162:	00 00       	nop
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	cf cf       	rjmp	.-98     	; 0x110 <main+0x26>

00000172 <UART1_init>:
#include <stdio.h>
#include <avr/sfr_defs.h>

void UART1_init(void)
{
	UBRR1H = 0x00;						//9,600보율로 설정
 172:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 7;
 176:	87 e0       	ldi	r24, 0x07	; 7
 178:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= _BV(U2X1);				//2배속 모드
 17c:	eb e9       	ldi	r30, 0x9B	; 155
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	82 60       	ori	r24, 0x02	; 2
 184:	80 83       	st	Z, r24
	UCSR1C |= 0x06;						//비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
 186:	ed e9       	ldi	r30, 0x9D	; 157
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	86 60       	ori	r24, 0x06	; 6
 18e:	80 83       	st	Z, r24
	
	UCSR1B |= _BV(RXEN1);				//송수신 가능
 190:	ea e9       	ldi	r30, 0x9A	; 154
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 61       	ori	r24, 0x10	; 16
 198:	80 83       	st	Z, r24
	UCSR1B |= _BV(TXEN1);
 19a:	80 81       	ld	r24, Z
 19c:	88 60       	ori	r24, 0x08	; 8
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <UART1_transmit>:
}

void UART1_transmit(unsigned char data)
{
	while( !(UCSR1A & (1 << UDRE1)) );	//송신 가능 대기
 1a2:	eb e9       	ldi	r30, 0x9B	; 155
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	95 ff       	sbrs	r25, 5
 1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <UART1_transmit+0x4>
	UDR1 = data;						//: UDRE1의 값 만큼 1(비트)을 이동시킨다.  UCSR1A레지스터와 같지않으면 계속 실행(대기)한다.
 1ac:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 1b0:	08 95       	ret

000001b2 <UART1_receive>:
}										//  1<<5는 0b00100000이다.	UDRE1의 값이 5지만, 5를 그대로 2진수로 변환하면
										//  0b00000101 이기 때문에 UDRE인 5번째 비트를 나타내지 못한다. 때문에 비트이동으로 비트위치를 표현한다.

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );		//UCSR1A레지스터와 RXC1비트를 비교하며, 같지않으면 계속 실행(대기)한다
 1b2:	eb e9       	ldi	r30, 0x9B	; 155
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	ec f7       	brge	.-6      	; 0x1b6 <UART1_receive+0x4>
	return UDR1;						//데이터가 수신되어 읽지 않은 문자가 있으면 RXC1이set되어 반복문을 빠져나오고 리턴값으로
 1bc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}										//UDR1레지스터를 반환한다.
 1c0:	08 95       	ret

000001c2 <printf>:
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	ae 01       	movw	r20, r28
 1cc:	4b 5f       	subi	r20, 0xFB	; 251
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255
 1d0:	fa 01       	movw	r30, r20
 1d2:	61 91       	ld	r22, Z+
 1d4:	71 91       	ld	r23, Z+
 1d6:	af 01       	movw	r20, r30
 1d8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end+0x2>
 1dc:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x3>
 1e0:	03 d0       	rcall	.+6      	; 0x1e8 <vfprintf>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <vfprintf>:
 1e8:	2f 92       	push	r2
 1ea:	3f 92       	push	r3
 1ec:	4f 92       	push	r4
 1ee:	5f 92       	push	r5
 1f0:	6f 92       	push	r6
 1f2:	7f 92       	push	r7
 1f4:	8f 92       	push	r8
 1f6:	9f 92       	push	r9
 1f8:	af 92       	push	r10
 1fa:	bf 92       	push	r11
 1fc:	cf 92       	push	r12
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	2b 97       	sbiw	r28, 0x0b	; 11
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	6c 01       	movw	r12, r24
 21e:	7b 01       	movw	r14, r22
 220:	8a 01       	movw	r16, r20
 222:	fc 01       	movw	r30, r24
 224:	17 82       	std	Z+7, r1	; 0x07
 226:	16 82       	std	Z+6, r1	; 0x06
 228:	83 81       	ldd	r24, Z+3	; 0x03
 22a:	81 ff       	sbrs	r24, 1
 22c:	bf c1       	rjmp	.+894    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 22e:	ce 01       	movw	r24, r28
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	3c 01       	movw	r6, r24
 234:	f6 01       	movw	r30, r12
 236:	93 81       	ldd	r25, Z+3	; 0x03
 238:	f7 01       	movw	r30, r14
 23a:	93 fd       	sbrc	r25, 3
 23c:	85 91       	lpm	r24, Z+
 23e:	93 ff       	sbrs	r25, 3
 240:	81 91       	ld	r24, Z+
 242:	7f 01       	movw	r14, r30
 244:	88 23       	and	r24, r24
 246:	09 f4       	brne	.+2      	; 0x24a <vfprintf+0x62>
 248:	ad c1       	rjmp	.+858    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 24a:	85 32       	cpi	r24, 0x25	; 37
 24c:	39 f4       	brne	.+14     	; 0x25c <vfprintf+0x74>
 24e:	93 fd       	sbrc	r25, 3
 250:	85 91       	lpm	r24, Z+
 252:	93 ff       	sbrs	r25, 3
 254:	81 91       	ld	r24, Z+
 256:	7f 01       	movw	r14, r30
 258:	85 32       	cpi	r24, 0x25	; 37
 25a:	21 f4       	brne	.+8      	; 0x264 <vfprintf+0x7c>
 25c:	b6 01       	movw	r22, r12
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	d6 d1       	rcall	.+940    	; 0x60e <fputc>
 262:	e8 cf       	rjmp	.-48     	; 0x234 <vfprintf+0x4c>
 264:	91 2c       	mov	r9, r1
 266:	21 2c       	mov	r2, r1
 268:	31 2c       	mov	r3, r1
 26a:	ff e1       	ldi	r31, 0x1F	; 31
 26c:	f3 15       	cp	r31, r3
 26e:	d8 f0       	brcs	.+54     	; 0x2a6 <vfprintf+0xbe>
 270:	8b 32       	cpi	r24, 0x2B	; 43
 272:	79 f0       	breq	.+30     	; 0x292 <vfprintf+0xaa>
 274:	38 f4       	brcc	.+14     	; 0x284 <vfprintf+0x9c>
 276:	80 32       	cpi	r24, 0x20	; 32
 278:	79 f0       	breq	.+30     	; 0x298 <vfprintf+0xb0>
 27a:	83 32       	cpi	r24, 0x23	; 35
 27c:	a1 f4       	brne	.+40     	; 0x2a6 <vfprintf+0xbe>
 27e:	23 2d       	mov	r18, r3
 280:	20 61       	ori	r18, 0x10	; 16
 282:	1d c0       	rjmp	.+58     	; 0x2be <vfprintf+0xd6>
 284:	8d 32       	cpi	r24, 0x2D	; 45
 286:	61 f0       	breq	.+24     	; 0x2a0 <vfprintf+0xb8>
 288:	80 33       	cpi	r24, 0x30	; 48
 28a:	69 f4       	brne	.+26     	; 0x2a6 <vfprintf+0xbe>
 28c:	23 2d       	mov	r18, r3
 28e:	21 60       	ori	r18, 0x01	; 1
 290:	16 c0       	rjmp	.+44     	; 0x2be <vfprintf+0xd6>
 292:	83 2d       	mov	r24, r3
 294:	82 60       	ori	r24, 0x02	; 2
 296:	38 2e       	mov	r3, r24
 298:	e3 2d       	mov	r30, r3
 29a:	e4 60       	ori	r30, 0x04	; 4
 29c:	3e 2e       	mov	r3, r30
 29e:	2a c0       	rjmp	.+84     	; 0x2f4 <vfprintf+0x10c>
 2a0:	f3 2d       	mov	r31, r3
 2a2:	f8 60       	ori	r31, 0x08	; 8
 2a4:	1d c0       	rjmp	.+58     	; 0x2e0 <vfprintf+0xf8>
 2a6:	37 fc       	sbrc	r3, 7
 2a8:	2d c0       	rjmp	.+90     	; 0x304 <vfprintf+0x11c>
 2aa:	20 ed       	ldi	r18, 0xD0	; 208
 2ac:	28 0f       	add	r18, r24
 2ae:	2a 30       	cpi	r18, 0x0A	; 10
 2b0:	40 f0       	brcs	.+16     	; 0x2c2 <vfprintf+0xda>
 2b2:	8e 32       	cpi	r24, 0x2E	; 46
 2b4:	b9 f4       	brne	.+46     	; 0x2e4 <vfprintf+0xfc>
 2b6:	36 fc       	sbrc	r3, 6
 2b8:	75 c1       	rjmp	.+746    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 2ba:	23 2d       	mov	r18, r3
 2bc:	20 64       	ori	r18, 0x40	; 64
 2be:	32 2e       	mov	r3, r18
 2c0:	19 c0       	rjmp	.+50     	; 0x2f4 <vfprintf+0x10c>
 2c2:	36 fe       	sbrs	r3, 6
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <vfprintf+0xea>
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
 2c8:	98 9e       	mul	r9, r24
 2ca:	20 0d       	add	r18, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	92 2e       	mov	r9, r18
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <vfprintf+0x10c>
 2d2:	ea e0       	ldi	r30, 0x0A	; 10
 2d4:	2e 9e       	mul	r2, r30
 2d6:	20 0d       	add	r18, r0
 2d8:	11 24       	eor	r1, r1
 2da:	22 2e       	mov	r2, r18
 2dc:	f3 2d       	mov	r31, r3
 2de:	f0 62       	ori	r31, 0x20	; 32
 2e0:	3f 2e       	mov	r3, r31
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <vfprintf+0x10c>
 2e4:	8c 36       	cpi	r24, 0x6C	; 108
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <vfprintf+0x108>
 2e8:	83 2d       	mov	r24, r3
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	38 2e       	mov	r3, r24
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <vfprintf+0x10c>
 2f0:	88 36       	cpi	r24, 0x68	; 104
 2f2:	41 f4       	brne	.+16     	; 0x304 <vfprintf+0x11c>
 2f4:	f7 01       	movw	r30, r14
 2f6:	93 fd       	sbrc	r25, 3
 2f8:	85 91       	lpm	r24, Z+
 2fa:	93 ff       	sbrs	r25, 3
 2fc:	81 91       	ld	r24, Z+
 2fe:	7f 01       	movw	r14, r30
 300:	81 11       	cpse	r24, r1
 302:	b3 cf       	rjmp	.-154    	; 0x26a <vfprintf+0x82>
 304:	98 2f       	mov	r25, r24
 306:	9f 7d       	andi	r25, 0xDF	; 223
 308:	95 54       	subi	r25, 0x45	; 69
 30a:	93 30       	cpi	r25, 0x03	; 3
 30c:	28 f4       	brcc	.+10     	; 0x318 <vfprintf+0x130>
 30e:	0c 5f       	subi	r16, 0xFC	; 252
 310:	1f 4f       	sbci	r17, 0xFF	; 255
 312:	9f e3       	ldi	r25, 0x3F	; 63
 314:	99 83       	std	Y+1, r25	; 0x01
 316:	0d c0       	rjmp	.+26     	; 0x332 <vfprintf+0x14a>
 318:	83 36       	cpi	r24, 0x63	; 99
 31a:	31 f0       	breq	.+12     	; 0x328 <vfprintf+0x140>
 31c:	83 37       	cpi	r24, 0x73	; 115
 31e:	71 f0       	breq	.+28     	; 0x33c <vfprintf+0x154>
 320:	83 35       	cpi	r24, 0x53	; 83
 322:	09 f0       	breq	.+2      	; 0x326 <vfprintf+0x13e>
 324:	55 c0       	rjmp	.+170    	; 0x3d0 <vfprintf+0x1e8>
 326:	20 c0       	rjmp	.+64     	; 0x368 <vfprintf+0x180>
 328:	f8 01       	movw	r30, r16
 32a:	80 81       	ld	r24, Z
 32c:	89 83       	std	Y+1, r24	; 0x01
 32e:	0e 5f       	subi	r16, 0xFE	; 254
 330:	1f 4f       	sbci	r17, 0xFF	; 255
 332:	88 24       	eor	r8, r8
 334:	83 94       	inc	r8
 336:	91 2c       	mov	r9, r1
 338:	53 01       	movw	r10, r6
 33a:	12 c0       	rjmp	.+36     	; 0x360 <vfprintf+0x178>
 33c:	28 01       	movw	r4, r16
 33e:	f2 e0       	ldi	r31, 0x02	; 2
 340:	4f 0e       	add	r4, r31
 342:	51 1c       	adc	r5, r1
 344:	f8 01       	movw	r30, r16
 346:	a0 80       	ld	r10, Z
 348:	b1 80       	ldd	r11, Z+1	; 0x01
 34a:	36 fe       	sbrs	r3, 6
 34c:	03 c0       	rjmp	.+6      	; 0x354 <vfprintf+0x16c>
 34e:	69 2d       	mov	r22, r9
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <vfprintf+0x170>
 354:	6f ef       	ldi	r22, 0xFF	; 255
 356:	7f ef       	ldi	r23, 0xFF	; 255
 358:	c5 01       	movw	r24, r10
 35a:	4e d1       	rcall	.+668    	; 0x5f8 <strnlen>
 35c:	4c 01       	movw	r8, r24
 35e:	82 01       	movw	r16, r4
 360:	f3 2d       	mov	r31, r3
 362:	ff 77       	andi	r31, 0x7F	; 127
 364:	3f 2e       	mov	r3, r31
 366:	15 c0       	rjmp	.+42     	; 0x392 <vfprintf+0x1aa>
 368:	28 01       	movw	r4, r16
 36a:	22 e0       	ldi	r18, 0x02	; 2
 36c:	42 0e       	add	r4, r18
 36e:	51 1c       	adc	r5, r1
 370:	f8 01       	movw	r30, r16
 372:	a0 80       	ld	r10, Z
 374:	b1 80       	ldd	r11, Z+1	; 0x01
 376:	36 fe       	sbrs	r3, 6
 378:	03 c0       	rjmp	.+6      	; 0x380 <vfprintf+0x198>
 37a:	69 2d       	mov	r22, r9
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <vfprintf+0x19c>
 380:	6f ef       	ldi	r22, 0xFF	; 255
 382:	7f ef       	ldi	r23, 0xFF	; 255
 384:	c5 01       	movw	r24, r10
 386:	2d d1       	rcall	.+602    	; 0x5e2 <strnlen_P>
 388:	4c 01       	movw	r8, r24
 38a:	f3 2d       	mov	r31, r3
 38c:	f0 68       	ori	r31, 0x80	; 128
 38e:	3f 2e       	mov	r3, r31
 390:	82 01       	movw	r16, r4
 392:	33 fc       	sbrc	r3, 3
 394:	19 c0       	rjmp	.+50     	; 0x3c8 <vfprintf+0x1e0>
 396:	82 2d       	mov	r24, r2
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	88 16       	cp	r8, r24
 39c:	99 06       	cpc	r9, r25
 39e:	a0 f4       	brcc	.+40     	; 0x3c8 <vfprintf+0x1e0>
 3a0:	b6 01       	movw	r22, r12
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	33 d1       	rcall	.+614    	; 0x60e <fputc>
 3a8:	2a 94       	dec	r2
 3aa:	f5 cf       	rjmp	.-22     	; 0x396 <vfprintf+0x1ae>
 3ac:	f5 01       	movw	r30, r10
 3ae:	37 fc       	sbrc	r3, 7
 3b0:	85 91       	lpm	r24, Z+
 3b2:	37 fe       	sbrs	r3, 7
 3b4:	81 91       	ld	r24, Z+
 3b6:	5f 01       	movw	r10, r30
 3b8:	b6 01       	movw	r22, r12
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	28 d1       	rcall	.+592    	; 0x60e <fputc>
 3be:	21 10       	cpse	r2, r1
 3c0:	2a 94       	dec	r2
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	82 1a       	sub	r8, r18
 3c6:	91 08       	sbc	r9, r1
 3c8:	81 14       	cp	r8, r1
 3ca:	91 04       	cpc	r9, r1
 3cc:	79 f7       	brne	.-34     	; 0x3ac <vfprintf+0x1c4>
 3ce:	e1 c0       	rjmp	.+450    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 3d0:	84 36       	cpi	r24, 0x64	; 100
 3d2:	11 f0       	breq	.+4      	; 0x3d8 <vfprintf+0x1f0>
 3d4:	89 36       	cpi	r24, 0x69	; 105
 3d6:	39 f5       	brne	.+78     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3d8:	f8 01       	movw	r30, r16
 3da:	37 fe       	sbrs	r3, 7
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <vfprintf+0x204>
 3de:	60 81       	ld	r22, Z
 3e0:	71 81       	ldd	r23, Z+1	; 0x01
 3e2:	82 81       	ldd	r24, Z+2	; 0x02
 3e4:	93 81       	ldd	r25, Z+3	; 0x03
 3e6:	0c 5f       	subi	r16, 0xFC	; 252
 3e8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ea:	08 c0       	rjmp	.+16     	; 0x3fc <vfprintf+0x214>
 3ec:	60 81       	ld	r22, Z
 3ee:	71 81       	ldd	r23, Z+1	; 0x01
 3f0:	07 2e       	mov	r0, r23
 3f2:	00 0c       	add	r0, r0
 3f4:	88 0b       	sbc	r24, r24
 3f6:	99 0b       	sbc	r25, r25
 3f8:	0e 5f       	subi	r16, 0xFE	; 254
 3fa:	1f 4f       	sbci	r17, 0xFF	; 255
 3fc:	f3 2d       	mov	r31, r3
 3fe:	ff 76       	andi	r31, 0x6F	; 111
 400:	3f 2e       	mov	r3, r31
 402:	97 ff       	sbrs	r25, 7
 404:	09 c0       	rjmp	.+18     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 406:	90 95       	com	r25
 408:	80 95       	com	r24
 40a:	70 95       	com	r23
 40c:	61 95       	neg	r22
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	8f 4f       	sbci	r24, 0xFF	; 255
 412:	9f 4f       	sbci	r25, 0xFF	; 255
 414:	f0 68       	ori	r31, 0x80	; 128
 416:	3f 2e       	mov	r3, r31
 418:	2a e0       	ldi	r18, 0x0A	; 10
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	a3 01       	movw	r20, r6
 41e:	33 d1       	rcall	.+614    	; 0x686 <__ultoa_invert>
 420:	88 2e       	mov	r8, r24
 422:	86 18       	sub	r8, r6
 424:	44 c0       	rjmp	.+136    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 426:	85 37       	cpi	r24, 0x75	; 117
 428:	31 f4       	brne	.+12     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42a:	23 2d       	mov	r18, r3
 42c:	2f 7e       	andi	r18, 0xEF	; 239
 42e:	b2 2e       	mov	r11, r18
 430:	2a e0       	ldi	r18, 0x0A	; 10
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	25 c0       	rjmp	.+74     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 436:	93 2d       	mov	r25, r3
 438:	99 7f       	andi	r25, 0xF9	; 249
 43a:	b9 2e       	mov	r11, r25
 43c:	8f 36       	cpi	r24, 0x6F	; 111
 43e:	c1 f0       	breq	.+48     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 440:	18 f4       	brcc	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 442:	88 35       	cpi	r24, 0x58	; 88
 444:	79 f0       	breq	.+30     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 446:	ae c0       	rjmp	.+348    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 448:	80 37       	cpi	r24, 0x70	; 112
 44a:	19 f0       	breq	.+6      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44c:	88 37       	cpi	r24, 0x78	; 120
 44e:	21 f0       	breq	.+8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 450:	a9 c0       	rjmp	.+338    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 452:	e9 2f       	mov	r30, r25
 454:	e0 61       	ori	r30, 0x10	; 16
 456:	be 2e       	mov	r11, r30
 458:	b4 fe       	sbrs	r11, 4
 45a:	0d c0       	rjmp	.+26     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 45c:	fb 2d       	mov	r31, r11
 45e:	f4 60       	ori	r31, 0x04	; 4
 460:	bf 2e       	mov	r11, r31
 462:	09 c0       	rjmp	.+18     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 464:	34 fe       	sbrs	r3, 4
 466:	0a c0       	rjmp	.+20     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 468:	29 2f       	mov	r18, r25
 46a:	26 60       	ori	r18, 0x06	; 6
 46c:	b2 2e       	mov	r11, r18
 46e:	06 c0       	rjmp	.+12     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 470:	28 e0       	ldi	r18, 0x08	; 8
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	05 c0       	rjmp	.+10     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 476:	20 e1       	ldi	r18, 0x10	; 16
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47c:	20 e1       	ldi	r18, 0x10	; 16
 47e:	32 e0       	ldi	r19, 0x02	; 2
 480:	f8 01       	movw	r30, r16
 482:	b7 fe       	sbrs	r11, 7
 484:	07 c0       	rjmp	.+14     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 486:	60 81       	ld	r22, Z
 488:	71 81       	ldd	r23, Z+1	; 0x01
 48a:	82 81       	ldd	r24, Z+2	; 0x02
 48c:	93 81       	ldd	r25, Z+3	; 0x03
 48e:	0c 5f       	subi	r16, 0xFC	; 252
 490:	1f 4f       	sbci	r17, 0xFF	; 255
 492:	06 c0       	rjmp	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 494:	60 81       	ld	r22, Z
 496:	71 81       	ldd	r23, Z+1	; 0x01
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 5f       	subi	r16, 0xFE	; 254
 49e:	1f 4f       	sbci	r17, 0xFF	; 255
 4a0:	a3 01       	movw	r20, r6
 4a2:	f1 d0       	rcall	.+482    	; 0x686 <__ultoa_invert>
 4a4:	88 2e       	mov	r8, r24
 4a6:	86 18       	sub	r8, r6
 4a8:	fb 2d       	mov	r31, r11
 4aa:	ff 77       	andi	r31, 0x7F	; 127
 4ac:	3f 2e       	mov	r3, r31
 4ae:	36 fe       	sbrs	r3, 6
 4b0:	0d c0       	rjmp	.+26     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4b2:	23 2d       	mov	r18, r3
 4b4:	2e 7f       	andi	r18, 0xFE	; 254
 4b6:	a2 2e       	mov	r10, r18
 4b8:	89 14       	cp	r8, r9
 4ba:	58 f4       	brcc	.+22     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4bc:	34 fe       	sbrs	r3, 4
 4be:	0b c0       	rjmp	.+22     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4c0:	32 fc       	sbrc	r3, 2
 4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4c4:	83 2d       	mov	r24, r3
 4c6:	8e 7e       	andi	r24, 0xEE	; 238
 4c8:	a8 2e       	mov	r10, r24
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4cc:	b8 2c       	mov	r11, r8
 4ce:	a3 2c       	mov	r10, r3
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d2:	b8 2c       	mov	r11, r8
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d6:	b9 2c       	mov	r11, r9
 4d8:	a4 fe       	sbrs	r10, 4
 4da:	0f c0       	rjmp	.+30     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4dc:	fe 01       	movw	r30, r28
 4de:	e8 0d       	add	r30, r8
 4e0:	f1 1d       	adc	r31, r1
 4e2:	80 81       	ld	r24, Z
 4e4:	80 33       	cpi	r24, 0x30	; 48
 4e6:	21 f4       	brne	.+8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4e8:	9a 2d       	mov	r25, r10
 4ea:	99 7e       	andi	r25, 0xE9	; 233
 4ec:	a9 2e       	mov	r10, r25
 4ee:	09 c0       	rjmp	.+18     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4f0:	a2 fe       	sbrs	r10, 2
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4f4:	b3 94       	inc	r11
 4f6:	b3 94       	inc	r11
 4f8:	04 c0       	rjmp	.+8      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4fa:	8a 2d       	mov	r24, r10
 4fc:	86 78       	andi	r24, 0x86	; 134
 4fe:	09 f0       	breq	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 500:	b3 94       	inc	r11
 502:	a3 fc       	sbrc	r10, 3
 504:	10 c0       	rjmp	.+32     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 506:	a0 fe       	sbrs	r10, 0
 508:	06 c0       	rjmp	.+12     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 50a:	b2 14       	cp	r11, r2
 50c:	80 f4       	brcc	.+32     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 50e:	28 0c       	add	r2, r8
 510:	92 2c       	mov	r9, r2
 512:	9b 18       	sub	r9, r11
 514:	0d c0       	rjmp	.+26     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 516:	b2 14       	cp	r11, r2
 518:	58 f4       	brcc	.+22     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 51a:	b6 01       	movw	r22, r12
 51c:	80 e2       	ldi	r24, 0x20	; 32
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	76 d0       	rcall	.+236    	; 0x60e <fputc>
 522:	b3 94       	inc	r11
 524:	f8 cf       	rjmp	.-16     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 526:	b2 14       	cp	r11, r2
 528:	18 f4       	brcc	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52a:	2b 18       	sub	r2, r11
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52e:	98 2c       	mov	r9, r8
 530:	21 2c       	mov	r2, r1
 532:	a4 fe       	sbrs	r10, 4
 534:	0f c0       	rjmp	.+30     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 536:	b6 01       	movw	r22, r12
 538:	80 e3       	ldi	r24, 0x30	; 48
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	68 d0       	rcall	.+208    	; 0x60e <fputc>
 53e:	a2 fe       	sbrs	r10, 2
 540:	16 c0       	rjmp	.+44     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 542:	a1 fc       	sbrc	r10, 1
 544:	03 c0       	rjmp	.+6      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 546:	88 e7       	ldi	r24, 0x78	; 120
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54c:	88 e5       	ldi	r24, 0x58	; 88
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	b6 01       	movw	r22, r12
 552:	0c c0       	rjmp	.+24     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 554:	8a 2d       	mov	r24, r10
 556:	86 78       	andi	r24, 0x86	; 134
 558:	51 f0       	breq	.+20     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 55a:	a1 fe       	sbrs	r10, 1
 55c:	02 c0       	rjmp	.+4      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 55e:	8b e2       	ldi	r24, 0x2B	; 43
 560:	01 c0       	rjmp	.+2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 562:	80 e2       	ldi	r24, 0x20	; 32
 564:	a7 fc       	sbrc	r10, 7
 566:	8d e2       	ldi	r24, 0x2D	; 45
 568:	b6 01       	movw	r22, r12
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	50 d0       	rcall	.+160    	; 0x60e <fputc>
 56e:	89 14       	cp	r8, r9
 570:	30 f4       	brcc	.+12     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 572:	b6 01       	movw	r22, r12
 574:	80 e3       	ldi	r24, 0x30	; 48
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	4a d0       	rcall	.+148    	; 0x60e <fputc>
 57a:	9a 94       	dec	r9
 57c:	f8 cf       	rjmp	.-16     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 57e:	8a 94       	dec	r8
 580:	f3 01       	movw	r30, r6
 582:	e8 0d       	add	r30, r8
 584:	f1 1d       	adc	r31, r1
 586:	80 81       	ld	r24, Z
 588:	b6 01       	movw	r22, r12
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	40 d0       	rcall	.+128    	; 0x60e <fputc>
 58e:	81 10       	cpse	r8, r1
 590:	f6 cf       	rjmp	.-20     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 592:	22 20       	and	r2, r2
 594:	09 f4       	brne	.+2      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 596:	4e ce       	rjmp	.-868    	; 0x234 <vfprintf+0x4c>
 598:	b6 01       	movw	r22, r12
 59a:	80 e2       	ldi	r24, 0x20	; 32
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	37 d0       	rcall	.+110    	; 0x60e <fputc>
 5a0:	2a 94       	dec	r2
 5a2:	f7 cf       	rjmp	.-18     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 5a4:	f6 01       	movw	r30, r12
 5a6:	86 81       	ldd	r24, Z+6	; 0x06
 5a8:	97 81       	ldd	r25, Z+7	; 0x07
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5ac:	8f ef       	ldi	r24, 0xFF	; 255
 5ae:	9f ef       	ldi	r25, 0xFF	; 255
 5b0:	2b 96       	adiw	r28, 0x0b	; 11
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	de bf       	out	0x3e, r29	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	bf 90       	pop	r11
 5ce:	af 90       	pop	r10
 5d0:	9f 90       	pop	r9
 5d2:	8f 90       	pop	r8
 5d4:	7f 90       	pop	r7
 5d6:	6f 90       	pop	r6
 5d8:	5f 90       	pop	r5
 5da:	4f 90       	pop	r4
 5dc:	3f 90       	pop	r3
 5de:	2f 90       	pop	r2
 5e0:	08 95       	ret

000005e2 <strnlen_P>:
 5e2:	fc 01       	movw	r30, r24
 5e4:	05 90       	lpm	r0, Z+
 5e6:	61 50       	subi	r22, 0x01	; 1
 5e8:	70 40       	sbci	r23, 0x00	; 0
 5ea:	01 10       	cpse	r0, r1
 5ec:	d8 f7       	brcc	.-10     	; 0x5e4 <strnlen_P+0x2>
 5ee:	80 95       	com	r24
 5f0:	90 95       	com	r25
 5f2:	8e 0f       	add	r24, r30
 5f4:	9f 1f       	adc	r25, r31
 5f6:	08 95       	ret

000005f8 <strnlen>:
 5f8:	fc 01       	movw	r30, r24
 5fa:	61 50       	subi	r22, 0x01	; 1
 5fc:	70 40       	sbci	r23, 0x00	; 0
 5fe:	01 90       	ld	r0, Z+
 600:	01 10       	cpse	r0, r1
 602:	d8 f7       	brcc	.-10     	; 0x5fa <strnlen+0x2>
 604:	80 95       	com	r24
 606:	90 95       	com	r25
 608:	8e 0f       	add	r24, r30
 60a:	9f 1f       	adc	r25, r31
 60c:	08 95       	ret

0000060e <fputc>:
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	fb 01       	movw	r30, r22
 618:	23 81       	ldd	r18, Z+3	; 0x03
 61a:	21 fd       	sbrc	r18, 1
 61c:	03 c0       	rjmp	.+6      	; 0x624 <fputc+0x16>
 61e:	8f ef       	ldi	r24, 0xFF	; 255
 620:	9f ef       	ldi	r25, 0xFF	; 255
 622:	2c c0       	rjmp	.+88     	; 0x67c <fputc+0x6e>
 624:	22 ff       	sbrs	r18, 2
 626:	16 c0       	rjmp	.+44     	; 0x654 <fputc+0x46>
 628:	46 81       	ldd	r20, Z+6	; 0x06
 62a:	57 81       	ldd	r21, Z+7	; 0x07
 62c:	24 81       	ldd	r18, Z+4	; 0x04
 62e:	35 81       	ldd	r19, Z+5	; 0x05
 630:	42 17       	cp	r20, r18
 632:	53 07       	cpc	r21, r19
 634:	44 f4       	brge	.+16     	; 0x646 <fputc+0x38>
 636:	a0 81       	ld	r26, Z
 638:	b1 81       	ldd	r27, Z+1	; 0x01
 63a:	9d 01       	movw	r18, r26
 63c:	2f 5f       	subi	r18, 0xFF	; 255
 63e:	3f 4f       	sbci	r19, 0xFF	; 255
 640:	31 83       	std	Z+1, r19	; 0x01
 642:	20 83       	st	Z, r18
 644:	8c 93       	st	X, r24
 646:	26 81       	ldd	r18, Z+6	; 0x06
 648:	37 81       	ldd	r19, Z+7	; 0x07
 64a:	2f 5f       	subi	r18, 0xFF	; 255
 64c:	3f 4f       	sbci	r19, 0xFF	; 255
 64e:	37 83       	std	Z+7, r19	; 0x07
 650:	26 83       	std	Z+6, r18	; 0x06
 652:	14 c0       	rjmp	.+40     	; 0x67c <fputc+0x6e>
 654:	8b 01       	movw	r16, r22
 656:	ec 01       	movw	r28, r24
 658:	fb 01       	movw	r30, r22
 65a:	00 84       	ldd	r0, Z+8	; 0x08
 65c:	f1 85       	ldd	r31, Z+9	; 0x09
 65e:	e0 2d       	mov	r30, r0
 660:	09 95       	icall
 662:	89 2b       	or	r24, r25
 664:	e1 f6       	brne	.-72     	; 0x61e <fputc+0x10>
 666:	d8 01       	movw	r26, r16
 668:	16 96       	adiw	r26, 0x06	; 6
 66a:	8d 91       	ld	r24, X+
 66c:	9c 91       	ld	r25, X
 66e:	17 97       	sbiw	r26, 0x07	; 7
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	17 96       	adiw	r26, 0x07	; 7
 674:	9c 93       	st	X, r25
 676:	8e 93       	st	-X, r24
 678:	16 97       	sbiw	r26, 0x06	; 6
 67a:	ce 01       	movw	r24, r28
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	08 95       	ret

00000686 <__ultoa_invert>:
 686:	fa 01       	movw	r30, r20
 688:	aa 27       	eor	r26, r26
 68a:	28 30       	cpi	r18, 0x08	; 8
 68c:	51 f1       	breq	.+84     	; 0x6e2 <__ultoa_invert+0x5c>
 68e:	20 31       	cpi	r18, 0x10	; 16
 690:	81 f1       	breq	.+96     	; 0x6f2 <__ultoa_invert+0x6c>
 692:	e8 94       	clt
 694:	6f 93       	push	r22
 696:	6e 7f       	andi	r22, 0xFE	; 254
 698:	6e 5f       	subi	r22, 0xFE	; 254
 69a:	7f 4f       	sbci	r23, 0xFF	; 255
 69c:	8f 4f       	sbci	r24, 0xFF	; 255
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	af 4f       	sbci	r26, 0xFF	; 255
 6a2:	b1 e0       	ldi	r27, 0x01	; 1
 6a4:	3e d0       	rcall	.+124    	; 0x722 <__ultoa_invert+0x9c>
 6a6:	b4 e0       	ldi	r27, 0x04	; 4
 6a8:	3c d0       	rcall	.+120    	; 0x722 <__ultoa_invert+0x9c>
 6aa:	67 0f       	add	r22, r23
 6ac:	78 1f       	adc	r23, r24
 6ae:	89 1f       	adc	r24, r25
 6b0:	9a 1f       	adc	r25, r26
 6b2:	a1 1d       	adc	r26, r1
 6b4:	68 0f       	add	r22, r24
 6b6:	79 1f       	adc	r23, r25
 6b8:	8a 1f       	adc	r24, r26
 6ba:	91 1d       	adc	r25, r1
 6bc:	a1 1d       	adc	r26, r1
 6be:	6a 0f       	add	r22, r26
 6c0:	71 1d       	adc	r23, r1
 6c2:	81 1d       	adc	r24, r1
 6c4:	91 1d       	adc	r25, r1
 6c6:	a1 1d       	adc	r26, r1
 6c8:	20 d0       	rcall	.+64     	; 0x70a <__ultoa_invert+0x84>
 6ca:	09 f4       	brne	.+2      	; 0x6ce <__ultoa_invert+0x48>
 6cc:	68 94       	set
 6ce:	3f 91       	pop	r19
 6d0:	2a e0       	ldi	r18, 0x0A	; 10
 6d2:	26 9f       	mul	r18, r22
 6d4:	11 24       	eor	r1, r1
 6d6:	30 19       	sub	r19, r0
 6d8:	30 5d       	subi	r19, 0xD0	; 208
 6da:	31 93       	st	Z+, r19
 6dc:	de f6       	brtc	.-74     	; 0x694 <__ultoa_invert+0xe>
 6de:	cf 01       	movw	r24, r30
 6e0:	08 95       	ret
 6e2:	46 2f       	mov	r20, r22
 6e4:	47 70       	andi	r20, 0x07	; 7
 6e6:	40 5d       	subi	r20, 0xD0	; 208
 6e8:	41 93       	st	Z+, r20
 6ea:	b3 e0       	ldi	r27, 0x03	; 3
 6ec:	0f d0       	rcall	.+30     	; 0x70c <__ultoa_invert+0x86>
 6ee:	c9 f7       	brne	.-14     	; 0x6e2 <__ultoa_invert+0x5c>
 6f0:	f6 cf       	rjmp	.-20     	; 0x6de <__ultoa_invert+0x58>
 6f2:	46 2f       	mov	r20, r22
 6f4:	4f 70       	andi	r20, 0x0F	; 15
 6f6:	40 5d       	subi	r20, 0xD0	; 208
 6f8:	4a 33       	cpi	r20, 0x3A	; 58
 6fa:	18 f0       	brcs	.+6      	; 0x702 <__ultoa_invert+0x7c>
 6fc:	49 5d       	subi	r20, 0xD9	; 217
 6fe:	31 fd       	sbrc	r19, 1
 700:	40 52       	subi	r20, 0x20	; 32
 702:	41 93       	st	Z+, r20
 704:	02 d0       	rcall	.+4      	; 0x70a <__ultoa_invert+0x84>
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__ultoa_invert+0x6c>
 708:	ea cf       	rjmp	.-44     	; 0x6de <__ultoa_invert+0x58>
 70a:	b4 e0       	ldi	r27, 0x04	; 4
 70c:	a6 95       	lsr	r26
 70e:	97 95       	ror	r25
 710:	87 95       	ror	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	ba 95       	dec	r27
 718:	c9 f7       	brne	.-14     	; 0x70c <__ultoa_invert+0x86>
 71a:	00 97       	sbiw	r24, 0x00	; 0
 71c:	61 05       	cpc	r22, r1
 71e:	71 05       	cpc	r23, r1
 720:	08 95       	ret
 722:	9b 01       	movw	r18, r22
 724:	ac 01       	movw	r20, r24
 726:	0a 2e       	mov	r0, r26
 728:	06 94       	lsr	r0
 72a:	57 95       	ror	r21
 72c:	47 95       	ror	r20
 72e:	37 95       	ror	r19
 730:	27 95       	ror	r18
 732:	ba 95       	dec	r27
 734:	c9 f7       	brne	.-14     	; 0x728 <__ultoa_invert+0xa2>
 736:	62 0f       	add	r22, r18
 738:	73 1f       	adc	r23, r19
 73a:	84 1f       	adc	r24, r20
 73c:	95 1f       	adc	r25, r21
 73e:	a0 1d       	adc	r26, r0
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
