
1s LED Flash using mill function.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000917  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000819  00000000  00000000  00000c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d0  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017e  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	38 c0       	rjmp	.+112    	; 0xae <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	61 d0       	rcall	.+194    	; 0x16c <main>
  aa:	ae c0       	rjmp	.+348    	; 0x208 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_15>:

volatile unsigned long timer0_millis = 0;
volatile int timer0_micros = 0;

ISR(TIMER0_COMP_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
	unsigned long m = timer0_millis;
  d0:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <timer0_millis>
  d4:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <timer0_millis+0x1>
  d8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <timer0_millis+0x2>
  dc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <timer0_millis+0x3>
	int f = timer0_micros;
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
	
	m += MICROS_INCREMENT_PER_OVERFLOW;
  e8:	08 5e       	subi	r16, 0xE8	; 232
  ea:	1f 4f       	sbci	r17, 0xFF	; 255
  ec:	2f 4f       	sbci	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
	f += MILLS_INCREMENT_PER_OVERFLOW;
  f0:	01 96       	adiw	r24, 0x01	; 1
	
	m += (f / 1000);
  f2:	68 ee       	ldi	r22, 0xE8	; 232
  f4:	73 e0       	ldi	r23, 0x03	; 3
  f6:	61 d0       	rcall	.+194    	; 0x1ba <__divmodhi4>
  f8:	ac 01       	movw	r20, r24
  fa:	cb 01       	movw	r24, r22
  fc:	77 0f       	add	r23, r23
  fe:	aa 0b       	sbc	r26, r26
 100:	bb 0b       	sbc	r27, r27
 102:	08 0f       	add	r16, r24
 104:	19 1f       	adc	r17, r25
 106:	2a 1f       	adc	r18, r26
 108:	3b 1f       	adc	r19, r27
	f = f % 1000;
	
	timer0_millis = m;
 10a:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <timer0_millis>
 10e:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <timer0_millis+0x1>
 112:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <timer0_millis+0x2>
 116:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <timer0_millis+0x3>
	timer0_micros = f;
 11a:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <_edata+0x1>
 11e:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
}
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 144:	2f b7       	in	r18, 0x3f	; 63
	
	cli();
 146:	f8 94       	cli
	
	m = timer0_millis;
 148:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <timer0_millis>
 14c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <timer0_millis+0x1>
 150:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timer0_millis+0x2>
 154:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timer0_millis+0x3>
	
	SREG = oldSREG;
 158:	2f bf       	out	0x3f, r18	; 63
	
	return m;
}
 15a:	08 95       	ret

0000015c <init_timer0>:

void init_timer0()
{
	TCCR0 |= (1 << CS02);
 15c:	83 b7       	in	r24, 0x33	; 51
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
 162:	87 b7       	in	r24, 0x37	; 55
 164:	81 60       	ori	r24, 0x01	; 1
 166:	87 bf       	out	0x37, r24	; 55
	
	sei();
 168:	78 94       	sei
 16a:	08 95       	ret

0000016c <main>:

int main(void)
{
    uint8_t state = 0;
	
	init_timer0();
 16c:	f7 df       	rcall	.-18     	; 0x15c <init_timer0>
	
	DDRB = 0x01;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
	
	unsigned long time_previous, time_current;
	time_previous = millis();
 172:	18 ba       	out	0x18, r1	; 24
 174:	e7 df       	rcall	.-50     	; 0x144 <millis>
 176:	6b 01       	movw	r12, r22
	sei();
}

int main(void)
{
    uint8_t state = 0;
 178:	7c 01       	movw	r14, r24
	unsigned long time_previous, time_current;
	time_previous = millis();
	
    while (1) 
    {
		time_current = millis();
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	e3 df       	rcall	.-58     	; 0x144 <millis>
		
		if ((time_current - time_previous) > 1000)
 17e:	8b 01       	movw	r16, r22
 180:	9c 01       	movw	r18, r24
 182:	0c 19       	sub	r16, r12
 184:	1d 09       	sbc	r17, r13
 186:	2e 09       	sbc	r18, r14
 188:	3f 09       	sbc	r19, r15
 18a:	09 3e       	cpi	r16, 0xE9	; 233
 18c:	13 40       	sbci	r17, 0x03	; 3
 18e:	21 05       	cpc	r18, r1
 190:	31 05       	cpc	r19, r1
 192:	a0 f3       	brcs	.-24     	; 0x17c <main+0x10>
		{
			time_previous = time_current;
			
			state = (state + 1) % 2;
 194:	2c 2f       	mov	r18, r28
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	21 70       	andi	r18, 0x01	; 1
 19e:	30 78       	andi	r19, 0x80	; 128
 1a0:	33 23       	and	r19, r19
 1a2:	34 f4       	brge	.+12     	; 0x1b0 <main+0x44>
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	31 09       	sbc	r19, r1
 1a8:	2e 6f       	ori	r18, 0xFE	; 254
 1aa:	3f 6f       	ori	r19, 0xFF	; 255
 1ac:	2f 5f       	subi	r18, 0xFF	; 255
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	c2 2f       	mov	r28, r18
			PORTB = state;
 1b2:	28 bb       	out	0x18, r18	; 24
	unsigned long time_previous, time_current;
	time_previous = millis();
	
    while (1) 
    {
		time_current = millis();
 1b4:	6b 01       	movw	r12, r22
 1b6:	7c 01       	movw	r14, r24
 1b8:	e1 cf       	rjmp	.-62     	; 0x17c <main+0x10>

000001ba <__divmodhi4>:
 1ba:	97 fb       	bst	r25, 7
 1bc:	07 2e       	mov	r0, r23
 1be:	16 f4       	brtc	.+4      	; 0x1c4 <__divmodhi4+0xa>
 1c0:	00 94       	com	r0
 1c2:	06 d0       	rcall	.+12     	; 0x1d0 <__divmodhi4_neg1>
 1c4:	77 fd       	sbrc	r23, 7
 1c6:	08 d0       	rcall	.+16     	; 0x1d8 <__divmodhi4_neg2>
 1c8:	0b d0       	rcall	.+22     	; 0x1e0 <__udivmodhi4>
 1ca:	07 fc       	sbrc	r0, 7
 1cc:	05 d0       	rcall	.+10     	; 0x1d8 <__divmodhi4_neg2>
 1ce:	3e f4       	brtc	.+14     	; 0x1de <__divmodhi4_exit>

000001d0 <__divmodhi4_neg1>:
 1d0:	90 95       	com	r25
 1d2:	81 95       	neg	r24
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	08 95       	ret

000001d8 <__divmodhi4_neg2>:
 1d8:	70 95       	com	r23
 1da:	61 95       	neg	r22
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255

000001de <__divmodhi4_exit>:
 1de:	08 95       	ret

000001e0 <__udivmodhi4>:
 1e0:	aa 1b       	sub	r26, r26
 1e2:	bb 1b       	sub	r27, r27
 1e4:	51 e1       	ldi	r21, 0x11	; 17
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <__udivmodhi4_ep>

000001e8 <__udivmodhi4_loop>:
 1e8:	aa 1f       	adc	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	a6 17       	cp	r26, r22
 1ee:	b7 07       	cpc	r27, r23
 1f0:	10 f0       	brcs	.+4      	; 0x1f6 <__udivmodhi4_ep>
 1f2:	a6 1b       	sub	r26, r22
 1f4:	b7 0b       	sbc	r27, r23

000001f6 <__udivmodhi4_ep>:
 1f6:	88 1f       	adc	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	5a 95       	dec	r21
 1fc:	a9 f7       	brne	.-22     	; 0x1e8 <__udivmodhi4_loop>
 1fe:	80 95       	com	r24
 200:	90 95       	com	r25
 202:	bc 01       	movw	r22, r24
 204:	cd 01       	movw	r24, r26
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
