
AVRASM ver. 2.1.30  D:\³¯°³Áþ\Debug\List\lcd.asm Tue Apr 09 16:44:32 2019

D:\³¯°³Áþ\Debug\List\lcd.asm(1097): warning: Register r7 already defined by the .DEF directive
D:\³¯°³Áþ\Debug\List\lcd.asm(1098): warning: Register r6 already defined by the .DEF directive
D:\³¯°³Áþ\Debug\List\lcd.asm(1099): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.32a Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0060 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00004f f9c0
000050 b0a4
000051 9299
000052 d882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xD8
000053 9880
000054 8388
000055 a1c6
000056 8e86      	.DB  0x80,0x98,0x88,0x83,0xC6,0xA1,0x86,0x8E
D:\³¯°³Áþ\Debug\List\lcd.asm(1153): warning: .cseg .db misalignment - padding zero byte
000057 007f      	.DB  0x7F
                 _0x2020003:
000058 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000059 0011      	.DW  0x11
00005a 0500      	.DW  _fnd
00005b 009e      	.DW  _0x3*2
                 
00005c 0002      	.DW  0x02
00005d 0512      	.DW  __base_y_G101
00005e 00b0      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00005f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000060 94f8      	CLI
000061 27ee      	CLR  R30
000062 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000063 e0f1      	LDI  R31,1
000064 bff5      	OUT  MCUCR,R31
000065 bfe5      	OUT  MCUCR,R30
000066 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000068 e08d      	LDI  R24,(14-2)+1
000069 e0a2      	LDI  R26,2
00006a 27bb      	CLR  R27
                 __CLEAR_REG:
00006b 93ed      	ST   X+,R30
00006c 958a      	DEC  R24
00006d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006f e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000070 e0a0      	LDI  R26,LOW(__SRAM_START)
000071 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000072 93ed      	ST   X+,R30
000073 9701      	SBIW R24,1
000074 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000075 ebe2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000076 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000077 9185      	LPM  R24,Z+
000078 9195      	LPM  R25,Z+
000079 9700      	SBIW R24,0
00007a f061      	BREQ __GLOBAL_INI_END
00007b 91a5      	LPM  R26,Z+
00007c 91b5      	LPM  R27,Z+
00007d 9005      	LPM  R0,Z+
00007e 9015      	LPM  R1,Z+
00007f 01bf      	MOVW R22,R30
000080 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000081 9005      	LPM  R0,Z+
000082 920d      	ST   X+,R0
000083 9701      	SBIW R24,1
000084 f7e1      	BRNE __GLOBAL_INI_LOOP
000085 01fb      	MOVW R30,R22
000086 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000087 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000088 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000089 bfed      	OUT  SPL,R30
00008a e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008c e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008d e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008e 940c 0090 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#asm
                 .equ __lcd_port=0x15                // PORTCÀÇ °æ¿ì
                 ; 0000 0003 #endasm
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <lcd.h>
                 ;
                 ;int KeyMatrix(unsigned char in); 		// Å° °ª¿¡¼­ FND Á¡µîÀ» À§ÇÑ °ªÀ¸·Î º¯È¯ÇÔ¼ö
                 ;// '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'dot'
                 ;unsigned char fnd[17]={0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x98, 0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e, 0 ...
                 
                 	.DSEG
                 ;
                 ;void main(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0010                int keyout;                                              // Å° ¸ÞÆ®¸¯½º Çà½ºÄµ °ª º¯¼ö
                 ; 0000 0011 	int i;
                 ; 0000 0012 	unsigned char matrix;
                 ; 0000 0013                int matrix_fast;
                 ; 0000 0014                int wkflt=0;
                 ; 0000 0015 	PORTB = 0xFF; DDRB = 0xFF;
000090 9724      	SBIW R28,4
000091 e0e0      	LDI  R30,LOW(0)
000092 83e8      	ST   Y,R30
000093 83e9      	STD  Y+1,R30
                 ;	keyout -> R16,R17
                 ;	i -> R18,R19
                 ;	matrix -> R21
                 ;	matrix_fast -> Y+2
                 ;	wkflt -> Y+0
000094 efef      	LDI  R30,LOW(255)
000095 bbe8      	OUT  0x18,R30
000096 bbe7      	OUT  0x17,R30
                 ; 0000 0016 	PORTA = 0xFF; DDRA = 0x0F;	// PORTA0,1,2,3Ãâ·Â, 4,5,6,7 ÀÔ·ÂÀ¸·Î
000097 bbeb      	OUT  0x1B,R30
000098 e0ef      	LDI  R30,LOW(15)
000099 bbea      	OUT  0x1A,R30
                 ; 0000 0017 	PORTB = ~fnd[0];               // ÃÊ±â "0" Ç¥½Ã
00009a 91e0 0500 	LDS  R30,_fnd
00009c 95e0      	COM  R30
00009d bbe8      	OUT  0x18,R30
                 ; 0000 0018                lcd_init(16);
00009e e1a0      	LDI  R26,LOW(16)
00009f d111      	RCALL _lcd_init
                 ; 0000 0019               while(1)
                 _0x4:
                 ; 0000 001A 	{
                 ; 0000 001B 	        keyout = 0xfe; 			// Å° ¸ÞÆ®¸¯½º ÃÊ±â Çà½ºÄµ °ª : 1110
                +
0000a0 ef0e     +LDI R16 , LOW ( 254 )
0000a1 e010     +LDI R17 , HIGH ( 254 )
                 	__GETWRN 16,17,254
                 ; 0000 001C 	        for(i = 0; i<=3; i++)
                +
0000a2 e020     +LDI R18 , LOW ( 0 )
0000a3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x8:
                +
0000a4 3024     +CPI R18 , LOW ( 4 )
0000a5 e0e0     +LDI R30 , HIGH ( 4 )
0000a6 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
0000a7 f474      	BRGE _0x9
                 ; 0000 001D 	        {
                 ; 0000 001E 		PORTA = keyout; 		// Çà ½ºÄµ Ãâ·Â
0000a8 bb0b      	OUT  0x1B,R16
                 ; 0000 001F 		matrix = PINA;
0000a9 b359      	IN   R21,25
                 ; 0000 0020                               matrix_fast=KeyMatrix(matrix);
0000aa 2fa5      	MOV  R26,R21
0000ab d01c      	RCALL _KeyMatrix
0000ac 83ea      	STD  Y+2,R30
0000ad 83fb      	STD  Y+2+1,R31
                 ; 0000 0021 		//PORTB = ~fnd[ KeyMatrix(matrix) ]; // Å° °ª -> FND Ç¥½Ã
                 ; 0000 0022 		keyout = (keyout<<1) + 0x01;   // ½ºÄµµ¥ÀÌÅÍ °»½Å 1110 ->1101 ->1011 ->0111
0000ae 01f8      	MOVW R30,R16
0000af 0fee      	LSL  R30
0000b0 1fff      	ROL  R31
0000b1 9631      	ADIW R30,1
0000b2 018f      	MOVW R16,R30
                 ; 0000 0023 
                 ; 0000 0024 	        }
                +
0000b3 5f2f     +SUBI R18 , LOW ( - 1 )
0000b4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000b5 cfee      	RJMP _0x8
                 _0x9:
                 ; 0000 0025                        if (matrix_fast==0x0F)
0000b6 81aa      	LDD  R26,Y+2
0000b7 81bb      	LDD  R27,Y+2+1
0000b8 971f      	SBIW R26,15
0000b9 f411      	BRNE _0xA
                 ; 0000 0026                           {
                 ; 0000 0027                            lcd_clear();
0000ba d0c0      	RCALL _lcd_clear
                 ; 0000 0028                           }
                 ; 0000 0029                        else if(matrix_fast)
0000bb c00a      	RJMP _0xB
                 _0xA:
0000bc 81ea      	LDD  R30,Y+2
0000bd 81fb      	LDD  R31,Y+2+1
0000be 9730      	SBIW R30,0
0000bf f031      	BREQ _0xC
                 ; 0000 002A                        {
                 ; 0000 002B                         lcd_gotoxy(wkflt,0);
0000c0 81e8      	LD   R30,Y
0000c1 93ea      	ST   -Y,R30
0000c2 e0a0      	LDI  R26,LOW(0)
0000c3 d0a9      	RCALL _lcd_gotoxy
                 ; 0000 002C                         lcd_putchar(matrix_fast);
0000c4 81aa      	LDD  R26,Y+2
0000c5 d0c2      	RCALL _lcd_putchar
                 ; 0000 002D 
                 ; 0000 002E                         //key=KeyMatrix();
                 ; 0000 002F                         //value=
                 ; 0000 0030                        }
                 ; 0000 0031 
                 ; 0000 0032 
                 ; 0000 0033                 //delay_ms(1);
                 ; 0000 0034 	}
                 _0xC:
                 _0xB:
0000c6 cfd9      	RJMP _0x4
                 ; 0000 0035 
                 ; 0000 0036 }
                 _0xD:
0000c7 cfff      	RJMP _0xD
                 ; .FEND
                 ;
                 ;
                 ;int KeyMatrix(unsigned char in) 	// Å° °ª¿¡¼­ FND Á¡µîÀ» À§ÇÑ °ªÀ¸·Î º¯È¯ ÇÔ¼ö
                 ; 0000 003A {
                 _KeyMatrix:
                 ; .FSTART _KeyMatrix
                 ; 0000 003B 	// static: case¿¡ µé¾î°¡Áö ¾Ê´Â Àß¸øµÈ ÀÔ·ÂÀÌ ¿À¸é ±âÁ¸ °ª À¯Áö
                 ; 0000 003C 	static unsigned char key = 0;
                 ; 0000 003D 	switch(in){
0000c8 931a      	ST   -Y,R17
0000c9 2f1a      	MOV  R17,R26
                 ;	in -> R17
0000ca 2fe1      	MOV  R30,R17
0000cb e0f0      	LDI  R31,0
                 ; 0000 003E 	 	case 0x7E : key = 0;  break;
0000cc 37ee      	CPI  R30,LOW(0x7E)
0000cd e0a0      	LDI  R26,HIGH(0x7E)
0000ce 07fa      	CPC  R31,R26
0000cf f411      	BRNE _0x11
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 c059      	RJMP _0x21
                 ; 0000 003F 		case 0x7D : key = 1;  break;
                 _0x11:
0000d2 37ed      	CPI  R30,LOW(0x7D)
0000d3 e0a0      	LDI  R26,HIGH(0x7D)
0000d4 07fa      	CPC  R31,R26
0000d5 f411      	BRNE _0x12
0000d6 e0e1      	LDI  R30,LOW(1)
0000d7 c053      	RJMP _0x21
                 ; 0000 0040 	 	case 0x7B : key = 2;  break;
                 _0x12:
0000d8 37eb      	CPI  R30,LOW(0x7B)
0000d9 e0a0      	LDI  R26,HIGH(0x7B)
0000da 07fa      	CPC  R31,R26
0000db f411      	BRNE _0x13
0000dc e0e2      	LDI  R30,LOW(2)
0000dd c04d      	RJMP _0x21
                 ; 0000 0041 	 	case 0x77 : key = 3;  break;
                 _0x13:
0000de 37e7      	CPI  R30,LOW(0x77)
0000df e0a0      	LDI  R26,HIGH(0x77)
0000e0 07fa      	CPC  R31,R26
0000e1 f411      	BRNE _0x14
0000e2 e0e3      	LDI  R30,LOW(3)
0000e3 c047      	RJMP _0x21
                 ; 0000 0042 	 	case 0xBE : key = 4;  break;
                 _0x14:
0000e4 3bee      	CPI  R30,LOW(0xBE)
0000e5 e0a0      	LDI  R26,HIGH(0xBE)
0000e6 07fa      	CPC  R31,R26
0000e7 f411      	BRNE _0x15
0000e8 e0e4      	LDI  R30,LOW(4)
0000e9 c041      	RJMP _0x21
                 ; 0000 0043 	 	case 0xBD : key = 5;  break;
                 _0x15:
0000ea 3bed      	CPI  R30,LOW(0xBD)
0000eb e0a0      	LDI  R26,HIGH(0xBD)
0000ec 07fa      	CPC  R31,R26
0000ed f411      	BRNE _0x16
0000ee e0e5      	LDI  R30,LOW(5)
0000ef c03b      	RJMP _0x21
                 ; 0000 0044 	 	case 0xBB : key = 6;  break;
                 _0x16:
0000f0 3beb      	CPI  R30,LOW(0xBB)
0000f1 e0a0      	LDI  R26,HIGH(0xBB)
0000f2 07fa      	CPC  R31,R26
0000f3 f411      	BRNE _0x17
0000f4 e0e6      	LDI  R30,LOW(6)
0000f5 c035      	RJMP _0x21
                 ; 0000 0045 	 	case 0xB7 : key = 7;  break;
                 _0x17:
0000f6 3be7      	CPI  R30,LOW(0xB7)
0000f7 e0a0      	LDI  R26,HIGH(0xB7)
0000f8 07fa      	CPC  R31,R26
0000f9 f411      	BRNE _0x18
0000fa e0e7      	LDI  R30,LOW(7)
0000fb c02f      	RJMP _0x21
                 ; 0000 0046 	 	case 0xDE : key = 8;  break;
                 _0x18:
0000fc 3dee      	CPI  R30,LOW(0xDE)
0000fd e0a0      	LDI  R26,HIGH(0xDE)
0000fe 07fa      	CPC  R31,R26
0000ff f411      	BRNE _0x19
000100 e0e8      	LDI  R30,LOW(8)
000101 c029      	RJMP _0x21
                 ; 0000 0047 	 	case 0xDD : key = 9;  break;
                 _0x19:
000102 3ded      	CPI  R30,LOW(0xDD)
000103 e0a0      	LDI  R26,HIGH(0xDD)
000104 07fa      	CPC  R31,R26
000105 f411      	BRNE _0x1A
000106 e0e9      	LDI  R30,LOW(9)
000107 c023      	RJMP _0x21
                 ; 0000 0048 	 	case 0xDB : key = 0x0A;  break;
                 _0x1A:
000108 3deb      	CPI  R30,LOW(0xDB)
000109 e0a0      	LDI  R26,HIGH(0xDB)
00010a 07fa      	CPC  R31,R26
00010b f411      	BRNE _0x1B
00010c e0ea      	LDI  R30,LOW(10)
00010d c01d      	RJMP _0x21
                 ; 0000 0049 	 	case 0xD7 : key = 0x0B;  break;
                 _0x1B:
00010e 3de7      	CPI  R30,LOW(0xD7)
00010f e0a0      	LDI  R26,HIGH(0xD7)
000110 07fa      	CPC  R31,R26
000111 f411      	BRNE _0x1C
000112 e0eb      	LDI  R30,LOW(11)
000113 c017      	RJMP _0x21
                 ; 0000 004A 	 	case 0xEE : key = 0x0C;  break;
                 _0x1C:
000114 3eee      	CPI  R30,LOW(0xEE)
000115 e0a0      	LDI  R26,HIGH(0xEE)
000116 07fa      	CPC  R31,R26
000117 f411      	BRNE _0x1D
000118 e0ec      	LDI  R30,LOW(12)
000119 c011      	RJMP _0x21
                 ; 0000 004B 	 	case 0xED : key = 0x0D;  break;
                 _0x1D:
00011a 3eed      	CPI  R30,LOW(0xED)
00011b e0a0      	LDI  R26,HIGH(0xED)
00011c 07fa      	CPC  R31,R26
00011d f411      	BRNE _0x1E
00011e e0ed      	LDI  R30,LOW(13)
00011f c00b      	RJMP _0x21
                 ; 0000 004C 	 	case 0xEB : key = 0x0E;  break;
                 _0x1E:
000120 3eeb      	CPI  R30,LOW(0xEB)
000121 e0a0      	LDI  R26,HIGH(0xEB)
000122 07fa      	CPC  R31,R26
000123 f411      	BRNE _0x1F
000124 e0ee      	LDI  R30,LOW(14)
000125 c005      	RJMP _0x21
                 ; 0000 004D 	 	case 0xE7 : key = 0x0F;  break;
                 _0x1F:
000126 3ee7      	CPI  R30,LOW(0xE7)
000127 e0a0      	LDI  R26,HIGH(0xE7)
000128 07fa      	CPC  R31,R26
000129 f419      	BRNE _0x10
00012a e0ef      	LDI  R30,LOW(15)
                 _0x21:
00012b 93e0 0511 	STS  _key_S0000001000,R30
                 ; 0000 004E 	}
                 _0x10:
                 ; 0000 004F 	return key;
00012d 91e0 0511 	LDS  R30,_key_S0000001000
00012f e0f0      	LDI  R31,0
000130 9119      	LD   R17,Y+
000131 9508      	RET
                 ; 0000 0050 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G101:
                 ; .FSTART __lcd_delay_G101
000132 e0ff          ldi   r31,15
                 __lcd_delay0:
000133 95fa          dec   r31
000134 f7f1          brne  __lcd_delay0
000135 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000136 b3a4          in    r26,__lcd_direction
000137 70af          andi  r26,0xf                 ;set as input
000138 bba4          out   __lcd_direction,r26
000139 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00013a 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00013b dff6      	RCALL __lcd_delay_G101
00013c 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00013d dff4      	RCALL __lcd_delay_G101
00013e b3a3          in    r26,__lcd_pin
00013f 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000140 dff1      	RCALL __lcd_delay_G101
000141 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000142 dfef      	RCALL __lcd_delay_G101
000143 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000144 fda7          sbrc  r26,__lcd_busy_flag
000145 cff5          rjmp  __lcd_busy
000146 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000147 7fa0          andi  r26,0xf0
000148 2bab          or    r26,r27
000149 bba5          out   __lcd_port,r26          ;write
00014a 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00014b dfe6      	RCALL __lcd_delay_G101
00014c 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00014d dfe4      	RCALL __lcd_delay_G101
00014e 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00014f 93aa      	ST   -Y,R26
000150 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000151 b3a4          in    r26,__lcd_direction
000152 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000153 bba4          out   __lcd_direction,r26
000154 b3b5          in    r27,__lcd_port
000155 70bf          andi  r27,0xf
000156 81a8          ld    r26,y
000157 dfef      	RCALL __lcd_write_nibble_G101
000158 81a8          ld    r26,y
000159 95a2          swap  r26
00015a dfec      	RCALL __lcd_write_nibble_G101
00015b 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00015c 940c 01e1 	JMP  _0x2080001
                 ; .FEND
                 __lcd_read_nibble_G101:
                 ; .FSTART __lcd_read_nibble_G101
00015e 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00015f dfd2      	RCALL __lcd_delay_G101
000160 b3e3          in    r30,__lcd_pin           ;read
000161 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000162 dfcf      	RCALL __lcd_delay_G101
000163 7fe0          andi  r30,0xf0
000164 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G101:
                 ; .FSTART _lcd_read_byte0_G101
000165 dfcc      	RCALL __lcd_delay_G101
000166 dff7      	RCALL __lcd_read_nibble_G101
000167 2fae          mov   r26,r30
000168 dff5      	RCALL __lcd_read_nibble_G101
000169 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
00016a 95e2          swap  r30
00016b 2bea          or    r30,r26
00016c 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00016d 93aa      	ST   -Y,R26
00016e dfc7      	RCALL __lcd_ready
00016f 81e8      	LD   R30,Y
000170 e0f0      	LDI  R31,0
000171 5eee      	SUBI R30,LOW(-__base_y_G101)
000172 4ffa      	SBCI R31,HIGH(-__base_y_G101)
000173 81e0      	LD   R30,Z
000174 81a9      	LDD  R26,Y+1
000175 0fae      	ADD  R26,R30
000176 dfd8      	RCALL __lcd_write_data
000177 8079      	LDD  R7,Y+1
000178 8068      	LDD  R6,Y+0
000179 9622      	ADIW R28,2
00017a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00017b dfba      	RCALL __lcd_ready
00017c e0a2      	LDI  R26,LOW(2)
00017d dfd1      	RCALL __lcd_write_data
00017e dfb7      	RCALL __lcd_ready
00017f e0ac      	LDI  R26,LOW(12)
000180 dfce      	RCALL __lcd_write_data
000181 dfb4      	RCALL __lcd_ready
000182 e0a1      	LDI  R26,LOW(1)
000183 dfcb      	RCALL __lcd_write_data
000184 e0e0      	LDI  R30,LOW(0)
000185 2e6e      	MOV  R6,R30
000186 2e7e      	MOV  R7,R30
000187 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000188 93aa      	ST   -Y,R26
000189 93ef          push r30
00018a 93ff          push r31
00018b 81a8          ld   r26,y
00018c 9468          set
00018d 30aa          cpi  r26,10
00018e f019          breq __lcd_putchar1
00018f 94e8          clt
000190 1479      	CP   R7,R9
000191 f030      	BRLO _0x2020004
                 	__lcd_putchar1:
000192 9463      	INC  R6
000193 e0e0      	LDI  R30,LOW(0)
000194 93ea      	ST   -Y,R30
000195 2da6      	MOV  R26,R6
000196 dfd6      	RCALL _lcd_gotoxy
000197 f02e      	brts __lcd_putchar0
                 _0x2020004:
000198 9473      	INC  R7
000199 df9c          rcall __lcd_ready
00019a 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
00019b 81a8      	LD   R26,Y
00019c dfb2      	RCALL __lcd_write_data
                 __lcd_putchar0:
00019d 91ff          pop  r31
00019e 91ef          pop  r30
00019f 940c 01e1 	JMP  _0x2080001
                 ; .FEND
                 __long_delay_G101:
                 ; .FSTART __long_delay_G101
0001a1 27aa          clr   r26
0001a2 27bb          clr   r27
                 __long_delay0:
0001a3 9711          sbiw  r26,1         ;2 cycles
0001a4 f7f1          brne  __long_delay0 ;2 cycles
0001a5 9508      	RET
                 ; .FEND
                 __lcd_init_write_G101:
                 ; .FSTART __lcd_init_write_G101
0001a6 93aa      	ST   -Y,R26
0001a7 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0001a8 b3a4          in    r26,__lcd_direction
0001a9 6fa7          ori   r26,0xf7                ;set as output
0001aa bba4          out   __lcd_direction,r26
0001ab b3b5          in    r27,__lcd_port
0001ac 70bf          andi  r27,0xf
0001ad 81a8          ld    r26,y
0001ae df98      	RCALL __lcd_write_nibble_G101
0001af 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001b0 c030      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001b1 93aa      	ST   -Y,R26
0001b2 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0001b3 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
0001b4 8098      	LDD  R9,Y+0
0001b5 81e8      	LD   R30,Y
0001b6 58e0      	SUBI R30,-LOW(128)
                +
0001b7 93e0 0514+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0001b9 81e8      	LD   R30,Y
0001ba 54e0      	SUBI R30,-LOW(192)
                +
0001bb 93e0 0515+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0001bd dfe3      	RCALL __long_delay_G101
0001be e3a0      	LDI  R26,LOW(48)
0001bf dfe6      	RCALL __lcd_init_write_G101
0001c0 dfe0      	RCALL __long_delay_G101
0001c1 e3a0      	LDI  R26,LOW(48)
0001c2 dfe3      	RCALL __lcd_init_write_G101
0001c3 dfdd      	RCALL __long_delay_G101
0001c4 e3a0      	LDI  R26,LOW(48)
0001c5 dfe0      	RCALL __lcd_init_write_G101
0001c6 dfda      	RCALL __long_delay_G101
0001c7 e2a0      	LDI  R26,LOW(32)
0001c8 dfdd      	RCALL __lcd_init_write_G101
0001c9 dfd7      	RCALL __long_delay_G101
0001ca e2a8      	LDI  R26,LOW(40)
0001cb df83      	RCALL __lcd_write_data
0001cc dfd4      	RCALL __long_delay_G101
0001cd e0a4      	LDI  R26,LOW(4)
0001ce df80      	RCALL __lcd_write_data
0001cf dfd1      	RCALL __long_delay_G101
0001d0 e8a5      	LDI  R26,LOW(133)
0001d1 df7d      	RCALL __lcd_write_data
0001d2 dfce      	RCALL __long_delay_G101
0001d3 b3a4          in    r26,__lcd_direction
0001d4 70af          andi  r26,0xf                 ;set as input
0001d5 bba4          out   __lcd_direction,r26
0001d6 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001d7 df8d      	RCALL _lcd_read_byte0_G101
0001d8 30e5      	CPI  R30,LOW(0x5)
0001d9 f011      	BREQ _0x202000B
0001da e0e0      	LDI  R30,LOW(0)
0001db c005      	RJMP _0x2080001
                 _0x202000B:
0001dc df59      	RCALL __lcd_ready
0001dd e0a6      	LDI  R26,LOW(6)
0001de df70      	RCALL __lcd_write_data
0001df df9b      	RCALL _lcd_clear
0001e0 e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
0001e1 9621      	ADIW R28,1
0001e2 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _fnd:
000500           	.BYTE 0x11
                 _key_S0000001000:
000511           	.BYTE 0x1
                 __base_y_G101:
000512           	.BYTE 0x4
                 
                 	.CSEG
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:   5 r18:   3 r19:   3 r20:   0 r21:   2 r22:   2 r23:   0 
r24:   8 r25:   2 r26:  89 r27:  10 r28:   4 r29:   1 r30:  97 r31:  30 
x  :   3 y  :  31 z  :   8 
Registers used: 22 out of 35 (62.9%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   3 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  22 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   1 
cp    :   1 cpc   :  17 cpi   :  19 cpse  :   0 dec   :   2 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   9 inc   :   2 jmp   :  38 ld    :  11 ldd   :   9 
ldi   :  74 lds   :   2 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   7 
movw  :   5 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   2 ori   :   2 out   :  17 pop   :   2 push  :   2 rcall :  49 
ret   :  10 reti  :   0 rjmp  :  23 rol   :   1 ror   :   0 sbc   :   0 
sbci  :   2 sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 
sbrc  :   1 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  12 std   :   3 sts   :   4 sub   :   0 subi  :   4 
swap  :   2 tst   :   0 wdr   :   0 
Instructions used: 47 out of 117 (40.2%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003c6    914     52    966  131072   0.7%
[.dseg] 0x000100 0x000516      0     22     22    4096   0.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 4 warnings
